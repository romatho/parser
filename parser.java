
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 20 16:31:47 CET 2018
//----------------------------------------------------

package parserClasses;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 20 16:31:47 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\015\003\000\002\010" +
    "\003\000\002\016\002\000\002\016\004\000\002\022\005" +
    "\000\002\022\002\000\002\003\007\000\002\003\011\000" +
    "\002\012\004\000\002\012\004\000\002\012\002\000\002" +
    "\020\004\000\002\020\002\000\002\017\005\000\002\017" +
    "\002\000\002\021\004\000\002\021\002\000\002\004\010" +
    "\000\002\004\006\000\002\004\005\000\002\004\006\000" +
    "\002\004\012\000\002\004\010\000\002\004\005\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\006\000\002" +
    "\004\010\000\002\004\006\000\002\004\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\005\006\000" +
    "\002\005\010\000\002\006\005\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\007\012\000\002\007\010\000\002\002\006" +
    "\000\002\023\004\000\002\023\002\000\002\024\005\000" +
    "\002\024\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\006\002\ufffe\005\ufffe\001\002\000\006\002" +
    "\uffff\005\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\006\002\ufffd\005\ufffd\001\002\000" +
    "\004\032\011\001\002\000\006\010\013\033\012\001\002" +
    "\000\006\030\ufff6\034\ufff6\001\002\000\004\030\014\001" +
    "\002\000\004\033\015\001\002\000\006\030\ufff6\034\ufff6" +
    "\001\002\000\006\030\021\034\017\001\002\000\006\002" +
    "\ufff9\005\ufff9\001\002\000\006\030\ufff8\034\ufff8\001\002" +
    "\000\006\035\023\037\024\001\002\000\006\030\ufff7\034" +
    "\ufff7\001\002\000\006\030\ufff2\036\147\001\002\000\014" +
    "\004\032\014\031\022\025\026\027\032\026\001\002\000" +
    "\016\013\uffcb\024\uffcb\033\uffcb\036\uffcb\040\uffcb\041\uffcb" +
    "\001\002\000\016\013\uffcf\024\uffcf\033\uffcf\036\uffcf\040" +
    "\uffcf\041\uffcf\001\002\000\016\013\uffcc\024\uffcc\033\uffcc" +
    "\036\uffcc\040\uffcc\041\uffcc\001\002\000\006\024\034\040" +
    "\033\001\002\000\016\013\uffce\024\uffce\033\uffce\036\uffce" +
    "\040\uffce\041\uffce\001\002\000\016\013\uffcd\024\uffcd\033" +
    "\uffcd\036\uffcd\040\uffcd\041\uffcd\001\002\000\006\030\uffd2" +
    "\034\uffd2\001\002\000\034\011\044\012\043\015\045\016" +
    "\053\017\037\021\040\023\036\027\047\030\052\031\051" +
    "\035\041\047\050\050\035\001\002\000\034\011\044\012" +
    "\043\015\045\016\053\017\037\021\040\023\036\027\047" +
    "\030\052\031\051\035\041\047\050\050\035\001\002\000" +
    "\034\011\044\012\043\015\045\016\053\017\037\021\040" +
    "\023\036\027\047\030\052\031\051\035\041\047\050\050" +
    "\035\001\002\000\004\035\137\001\002\000\046\006\uffd4" +
    "\007\uffd4\013\uffd4\020\uffd4\025\uffd4\034\uffd4\036\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\053\uffd4\001\002\000\034\011" +
    "\044\012\043\015\045\016\053\017\037\021\040\023\036" +
    "\027\047\030\052\031\051\035\041\047\050\050\035\001" +
    "\002\000\046\006\uffd9\007\uffd9\013\uffd9\020\uffd9\025\uffd9" +
    "\034\uffd9\036\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\001\002\000\034\011\044\012\043\015\045\016\053\017" +
    "\037\021\040\023\036\027\047\030\052\031\051\035\041" +
    "\047\050\050\035\001\002\000\046\006\uffd3\007\uffd3\013" +
    "\uffd3\020\uffd3\025\uffd3\034\uffd3\036\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\001\002\000\034\011\044\012\043" +
    "\015\045\016\053\017\037\021\040\023\036\027\047\030" +
    "\052\031\051\035\041\047\050\050\035\001\002\000\030" +
    "\025\073\040\126\042\064\043\070\044\065\045\074\046" +
    "\072\050\063\051\071\052\066\053\075\001\002\000\046" +
    "\006\uffd7\007\uffd7\013\uffd7\020\uffd7\025\uffd7\034\uffd7\036" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\001\002\000" +
    "\034\011\044\012\043\015\045\016\053\017\037\021\040" +
    "\023\036\027\047\030\052\031\051\035\041\047\050\050" +
    "\035\001\002\000\046\006\uffd8\007\uffd8\013\uffd8\020\uffd8" +
    "\025\uffd8\034\uffd8\036\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\001\002\000\052\006\uffd6\007\uffd6\013\uffd6\020" +
    "\uffd6\024\121\025\uffd6\034\uffd6\035\120\036\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\050" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\001\002\000\004\030\055" +
    "\001\002\000\046\006\uffd5\007\uffd5\013\uffd5\020\uffd5\025" +
    "\uffd5\034\uffd5\036\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\050\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\001\002\000\004\037\056\001\002\000\014\004\032" +
    "\014\031\022\025\026\027\032\026\001\002\000\006\013" +
    "\060\024\061\001\002\000\034\011\044\012\043\015\045" +
    "\016\053\017\037\021\040\023\036\027\047\030\052\031" +
    "\051\035\041\047\050\050\035\001\002\000\034\011\044" +
    "\012\043\015\045\016\053\017\037\021\040\023\036\027" +
    "\047\030\052\031\051\035\041\047\050\050\035\001\002" +
    "\000\030\013\067\025\073\042\064\043\070\044\065\045" +
    "\074\046\072\050\063\051\071\052\066\053\075\001\002" +
    "\000\034\011\044\012\043\015\045\016\053\017\037\021" +
    "\040\023\036\027\047\030\052\031\051\035\041\047\050" +
    "\050\035\001\002\000\034\011\044\012\043\015\045\016" +
    "\053\017\037\021\040\023\036\027\047\030\052\031\051" +
    "\035\041\047\050\050\035\001\002\000\034\011\044\012" +
    "\043\015\045\016\053\017\037\021\040\023\036\027\047" +
    "\030\052\031\051\035\041\047\050\050\035\001\002\000" +
    "\034\011\044\012\043\015\045\016\053\017\037\021\040" +
    "\023\036\027\047\030\052\031\051\035\041\047\050\050" +
    "\035\001\002\000\034\011\044\012\043\015\045\016\053" +
    "\017\037\021\040\023\036\027\047\030\052\031\051\035" +
    "\041\047\050\050\035\001\002\000\034\011\044\012\043" +
    "\015\045\016\053\017\037\021\040\023\036\027\047\030" +
    "\052\031\051\035\041\047\050\050\035\001\002\000\034" +
    "\011\044\012\043\015\045\016\053\017\037\021\040\023" +
    "\036\027\047\030\052\031\051\035\041\047\050\050\035" +
    "\001\002\000\034\011\044\012\043\015\045\016\053\017" +
    "\037\021\040\023\036\027\047\030\052\031\051\035\041" +
    "\047\050\050\035\001\002\000\004\030\100\001\002\000" +
    "\034\011\044\012\043\015\045\016\053\017\037\021\040" +
    "\023\036\027\047\030\052\031\051\035\041\047\050\050" +
    "\035\001\002\000\034\011\044\012\043\015\045\016\053" +
    "\017\037\021\040\023\036\027\047\030\052\031\051\035" +
    "\041\047\050\050\035\001\002\000\046\006\uffe0\007\uffe0" +
    "\013\uffe0\020\uffe0\025\uffe0\034\uffe0\036\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\070\044\065\045\074\046\uffe0\050\uffe0" +
    "\051\uffe0\052\066\053\uffe0\001\002\000\042\006\uffe3\007" +
    "\uffe3\013\uffe3\020\uffe3\025\uffe3\034\uffe3\036\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\046\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\001\002\000\004\035\101\001\002\000\036" +
    "\011\uffc4\012\uffc4\015\uffc4\016\uffc4\017\uffc4\021\uffc4\023" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\035\uffc4\036\uffc6\047\uffc4" +
    "\050\uffc4\001\002\000\004\036\106\001\002\000\034\011" +
    "\044\012\043\015\045\016\053\017\037\021\040\023\036" +
    "\027\047\030\052\031\051\035\041\047\050\050\035\001" +
    "\002\000\032\025\073\036\uffc7\041\105\042\064\043\070" +
    "\044\065\045\074\046\072\050\063\051\071\052\066\053" +
    "\075\001\002\000\034\011\uffc5\012\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\021\uffc5\023\uffc5\027\uffc5\030\uffc5\031\uffc5\035" +
    "\uffc5\047\uffc5\050\uffc5\001\002\000\046\006\uffdb\007\uffdb" +
    "\013\uffdb\020\uffdb\025\uffdb\034\uffdb\036\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\050\uffdb" +
    "\051\uffdb\052\uffdb\053\uffdb\001\002\000\046\006\uffde\007" +
    "\uffde\013\uffde\020\uffde\025\uffde\034\uffde\036\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\070\044\065\045\074\046\uffde\050" +
    "\uffde\051\uffde\052\066\053\uffde\001\002\000\046\006\uffe2" +
    "\007\uffe2\013\uffe2\020\uffe2\025\073\034\uffe2\036\uffe2\040" +
    "\uffe2\041\uffe2\042\064\043\070\044\065\045\074\046\072" +
    "\050\uffe2\051\uffe2\052\066\053\075\001\002\000\046\006" +
    "\uffe5\007\uffe5\013\uffe5\020\uffe5\025\uffe5\034\uffe5\036\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\065\045\074\046" +
    "\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\001\002\000\046" +
    "\006\uffeb\007\uffeb\013\uffeb\020\uffeb\025\073\034\uffeb\036" +
    "\uffeb\040\uffeb\041\uffeb\042\064\043\070\044\065\045\074" +
    "\046\072\050\063\051\071\052\066\053\075\001\002\000" +
    "\046\006\uffdf\007\uffdf\013\uffdf\020\uffdf\025\uffdf\034\uffdf" +
    "\036\uffdf\040\uffdf\041\uffdf\042\uffdf\043\070\044\065\045" +
    "\074\046\uffdf\050\uffdf\051\uffdf\052\066\053\uffdf\001\002" +
    "\000\042\006\uffe4\007\uffe4\013\uffe4\020\uffe4\025\uffe4\034" +
    "\uffe4\036\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\046\uffe4" +
    "\050\uffe4\051\uffe4\052\uffe4\053\uffe4\001\002\000\046\006" +
    "\uffdd\007\uffdd\013\uffdd\020\uffdd\025\uffdd\034\uffdd\036\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\070\044\065\045\074\046" +
    "\uffdd\050\uffdd\051\uffdd\052\066\053\uffdd\001\002\000\046" +
    "\006\uffe1\007\uffe1\013\uffe1\020\uffe1\025\073\034\uffe1\036" +
    "\uffe1\040\uffe1\041\uffe1\042\064\043\070\044\065\045\074" +
    "\046\072\050\uffe1\051\uffe1\052\066\053\075\001\002\000" +
    "\046\006\uffea\007\uffea\013\uffea\020\uffea\025\073\034\uffea" +
    "\036\uffea\040\uffea\041\uffea\042\064\043\070\044\065\045" +
    "\074\046\072\050\063\051\071\052\066\053\075\001\002" +
    "\000\036\011\uffc4\012\uffc4\015\uffc4\016\uffc4\017\uffc4\021" +
    "\uffc4\023\uffc4\027\uffc4\030\uffc4\031\uffc4\035\uffc4\036\uffc6" +
    "\047\uffc4\050\uffc4\001\002\000\034\011\044\012\043\015" +
    "\045\016\053\017\037\021\040\023\036\027\047\030\052" +
    "\031\051\035\041\047\050\050\035\001\002\000\046\006" +
    "\uffe9\007\uffe9\013\uffe9\020\uffe9\025\uffe9\034\uffe9\036\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\043\070\044\065\045\074\046" +
    "\uffe9\050\uffe9\051\uffe9\052\066\053\uffe9\001\002\000\004" +
    "\036\124\001\002\000\046\006\uffdc\007\uffdc\013\uffdc\020" +
    "\uffdc\025\uffdc\034\uffdc\036\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\046\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\001\002\000\046\006\uffe8\007\uffe8\013\uffe8" +
    "\020\uffe8\025\073\034\uffe8\036\uffe8\040\uffe8\041\uffe8\042" +
    "\064\043\070\044\065\045\074\046\072\050\063\051\071" +
    "\052\066\053\075\001\002\000\006\030\uffd1\034\uffd1\001" +
    "\002\000\046\006\uffe6\007\uffe6\013\uffe6\020\uffe6\025\uffe6" +
    "\034\uffe6\036\uffe6\040\uffe6\041\uffe6\042\uffe6\043\070\044" +
    "\065\045\074\046\uffe6\050\uffe6\051\uffe6\052\066\053\uffe6" +
    "\001\002\000\030\020\131\025\073\042\064\043\070\044" +
    "\065\045\074\046\072\050\063\051\071\052\066\053\075" +
    "\001\002\000\034\011\044\012\043\015\045\016\053\017" +
    "\037\021\040\023\036\027\047\030\052\031\051\035\041" +
    "\047\050\050\035\001\002\000\046\006\uffee\007\133\013" +
    "\uffee\020\uffee\025\073\034\uffee\036\uffee\040\uffee\041\uffee" +
    "\042\064\043\070\044\065\045\074\046\072\050\063\051" +
    "\071\052\066\053\075\001\002\000\034\011\044\012\043" +
    "\015\045\016\053\017\037\021\040\023\036\027\047\030" +
    "\052\031\051\035\041\047\050\050\035\001\002\000\046" +
    "\006\uffef\007\uffef\013\uffef\020\uffef\025\uffef\034\uffef\036" +
    "\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef" +
    "\046\uffef\050\uffef\051\uffef\052\uffef\053\uffef\001\002\000" +
    "\030\025\073\036\136\042\064\043\070\044\065\045\074" +
    "\046\072\050\063\051\071\052\066\053\075\001\002\000" +
    "\046\006\uffed\007\uffed\013\uffed\020\uffed\025\uffed\034\uffed" +
    "\036\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\050\uffed\051\uffed\052\uffed\053\uffed\001\002" +
    "\000\014\004\032\014\031\022\025\026\027\032\026\001" +
    "\002\000\004\036\141\001\002\000\046\006\uffda\007\uffda" +
    "\013\uffda\020\uffda\025\uffda\034\uffda\036\uffda\040\uffda\041" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\050\uffda" +
    "\051\uffda\052\uffda\053\uffda\001\002\000\030\006\143\025" +
    "\073\042\064\043\070\044\065\045\074\046\072\050\063" +
    "\051\071\052\066\053\075\001\002\000\034\011\044\012" +
    "\043\015\045\016\053\017\037\021\040\023\036\027\047" +
    "\030\052\031\051\035\041\047\050\050\035\001\002\000" +
    "\046\006\uffec\007\uffec\013\uffec\020\uffec\025\073\034\uffec" +
    "\036\uffec\040\uffec\041\uffec\042\064\043\070\044\065\045" +
    "\074\046\072\050\063\051\071\052\066\053\075\001\002" +
    "\000\046\006\uffe7\007\uffe7\013\uffe7\020\uffe7\025\073\034" +
    "\uffe7\036\uffe7\040\uffe7\041\uffe7\042\064\043\070\044\065" +
    "\045\074\046\072\050\uffe7\051\uffe7\052\066\053\075\001" +
    "\002\000\004\030\161\001\002\000\004\037\150\001\002" +
    "\000\014\004\032\014\031\022\025\026\027\032\026\001" +
    "\002\000\004\033\152\001\002\000\034\011\ufffb\012\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\021\ufffb\023\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\035\ufffb\047\ufffb\050\ufffb\001\002\000\006" +
    "\030\uffc9\034\uffc9\001\002\000\034\011\044\012\043\015" +
    "\045\016\053\017\037\021\040\023\036\027\047\030\052" +
    "\031\051\035\041\047\050\050\035\001\002\000\032\025" +
    "\073\034\157\040\156\042\064\043\070\044\065\045\074" +
    "\046\072\050\063\051\071\052\066\053\075\001\002\000" +
    "\034\011\ufffc\012\ufffc\015\ufffc\016\ufffc\017\ufffc\021\ufffc" +
    "\023\ufffc\027\ufffc\030\ufffc\031\ufffc\035\ufffc\047\ufffc\050" +
    "\ufffc\001\002\000\006\030\uffc8\034\uffc8\001\002\000\006" +
    "\036\165\041\164\001\002\000\004\037\162\001\002\000" +
    "\014\004\032\014\031\022\025\026\027\032\026\001\002" +
    "\000\006\036\uffd0\041\uffd0\001\002\000\004\030\ufff3\001" +
    "\002\000\004\037\166\001\002\000\014\004\032\014\031" +
    "\022\025\026\027\032\026\001\002\000\004\033\152\001" +
    "\002\000\006\030\uffca\034\uffca\001\002\000\006\030\021" +
    "\034\172\001\002\000\006\002\ufffa\005\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\006\010\004\016\003\001\001\000\004\003" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\015\001\001\000\006\005\017\007\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\145\001\001\000\004\011\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\045\013\041\014\053\001\001" +
    "\000\010\004\144\013\041\014\053\001\001\000\010\004" +
    "\141\013\041\014\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\134\013\041\014\053\001\001\000" +
    "\002\001\001\000\010\004\127\013\041\014\053\001\001" +
    "\000\002\001\001\000\010\004\126\013\041\014\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\124" +
    "\013\041\014\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\056\001\001\000\002\001\001\000\010\004" +
    "\116\013\041\014\053\001\001\000\010\004\061\013\041" +
    "\014\053\001\001\000\002\001\001\000\010\004\115\013" +
    "\041\014\053\001\001\000\010\004\114\013\041\014\053" +
    "\001\001\000\010\004\113\013\041\014\053\001\001\000" +
    "\010\004\112\013\041\014\053\001\001\000\010\004\111" +
    "\013\041\014\053\001\001\000\010\004\110\013\041\014" +
    "\053\001\001\000\010\004\107\013\041\014\053\001\001" +
    "\000\010\004\106\013\041\014\053\001\001\000\002\001" +
    "\001\000\010\004\076\013\041\014\053\001\001\000\010" +
    "\004\075\013\041\014\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\101\024\102" +
    "\001\001\000\002\001\001\000\010\004\103\013\041\014" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\122\024\102\001\001\000\010\004\121\013\041" +
    "\014\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\131\013\041\014" +
    "\053\001\001\000\002\001\001\000\010\004\133\013\041" +
    "\014\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\143\013" +
    "\041\014\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\157\001\001\000\002\001\001\000\004\011" +
    "\150\001\001\000\004\002\152\001\001\000\004\022\153" +
    "\001\001\000\002\001\001\000\010\004\154\013\041\014" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\166\001\001\000\004\002\167\001" +
    "\001\000\002\001\001\000\006\005\017\007\021\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Program program;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // argOthers ::= 
            {
              ParserArray<Expressions> RESULT =null;
		RESULT=new ParserArray<Expressions>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argOthers",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // argOthers ::= argOthers expression COMMA 
            {
              ParserArray<Expressions> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Expressions> args = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		args.add(exp1); RESULT=args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argOthers",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // argArray ::= 
            {
              ParserArray<Expressions> RESULT =null;
		RESULT=new ParserArray<Expressions>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argArray",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // argArray ::= argOthers expression 
            {
              ParserArray<Expressions> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Expressions> args = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		args.add(exp1); RESULT=args;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argArray",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // block ::= LBRACE expArray expression RBRACE 
            {
              Blocks RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Expressions> ea = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("block"); ea.add(exp1); System.out.println(ea.toString()); RESULT = new Blocks(0,0,ea); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // method ::= OBJECTIDENTIFIER LPAR RPAR COLON types block 
            {
              Method RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blocks b = (Blocks)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("method2"); RESULT = new Method(0, 0, oi, null, t, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // method ::= OBJECTIDENTIFIER LPAR formalArray formals RPAR COLON types block 
            {
              Method RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParserArray<Formals> fa = (ParserArray<Formals>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Formals f = (Formals)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blocks b = (Blocks)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("method");fa.add(f); RESULT = new Method(0, 0, oi, fa, t, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // types ::= UNIT 
            {
              Types RESULT =null;
		 System.out.println("type5"); RESULT = new Types(0,0,"unit"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // types ::= STRING 
            {
              Types RESULT =null;
		 System.out.println("type4"); RESULT = new Types(0,0,"string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // types ::= BOOL 
            {
              Types RESULT =null;
		 System.out.println("type3"); RESULT = new Types(0,0,"bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // types ::= INT32 
            {
              Types RESULT =null;
		 System.out.println("type2"); RESULT = new Types(0,0,"int32"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // types ::= TYPEIDENTIFIER 
            {
              Types RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("type1"); RESULT = new Types(0,0,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // formals ::= OBJECTIDENTIFIER COLON types 
            {
              Formals RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("formals1"); RESULT = new Formals(0,0,oi,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // field ::= OBJECTIDENTIFIER COLON types ASSIGN expression SEMICOLON 
            {
              Field RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Field2"); RESULT = new Field(0,0,oi,t,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // field ::= OBJECTIDENTIFIER COLON types SEMICOLON 
            {
              Field RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Field1"); RESULT = new Field(0,0,oi,t,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // boolean ::= FALSE 
            {
              Terminal RESULT =null;
		System.out.println("bool2"); RESULT = new Terminal(0, 0, "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // boolean ::= TRUE 
            {
              Terminal RESULT =null;
		System.out.println("bool1"); RESULT = new Terminal(0, 0, "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // terminaison ::= boolean 
            {
              Terminal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Terminal b = (Terminal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("bool"); RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminaison",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // terminaison ::= OBJECTIDENTIFIER 
            {
              Terminal RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("terminaison1522"); RESULT = new Terminal(0, 0, oi); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminaison",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // terminaison ::= STRINGLITERAL 
            {
              Terminal RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("terminaison2"); RESULT = new Terminal(0, 0, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminaison",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // terminaison ::= INTEGERLITERAL 
            {
              Terminal RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("terminaison1"); RESULT = new Terminal(0, 0, it); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminaison",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= terminaison 
            {
              Expressions RESULT =null;
		int terleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int terright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Terminal ter = (Terminal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ter; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= NEW LPAR types RPAR 
            {
              Expressions RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types ti = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new New(0, 0, ti);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression DOT OBJECTIDENTIFIER LPAR argArray RPAR 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Expressions> aa = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Call(0, 0, exp1, oi, aa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= OBJECTIDENTIFIER LPAR argArray RPAR 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Expressions> aa = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Call(0, 0, new Terminal(0, 0, "self"), oi, aa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression AND expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "AND", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression DIV expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "//", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression POW expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "^", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression TIMES expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "*", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression MINUS expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "-", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression PLUS expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "+", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression LOWEREQUAL expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "<=", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression LOWER expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "<", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression EQUAL expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "=", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= ISNULL expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnOp(0, 0, "isnull", exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= MINUS expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnOp(0, 0, "-", exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= NOT expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnOp(0, 0, "not", exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= OBJECTIDENTIFIER ASSIGN expression 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Assign(0, 0, oi, exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= LET OBJECTIDENTIFIER COLON types IN expression 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Types ti = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Let(0, 0, oi, ti, exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= LET OBJECTIDENTIFIER COLON types ASSIGN expression IN expression 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Types ti = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Let(0, 0, oi, ti, exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= WHILE expression DO expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new While(0, 0, exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= LPAR expression RPAR 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = exp1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= IF expression THEN expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(0, 0, exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= IF expression THEN expression ELSE expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp3 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(0, 0, exp1, exp2, exp3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // methodsArray ::= 
            {
              ParserArray<Method> RESULT =null;
		 System.out.println("methodArray2"); RESULT=new ParserArray<Method>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodsArray",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methodsArray ::= methodsArray method 
            {
              ParserArray<Method> RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Method> ma = (ParserArray<Method>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("methodArray1"); ma.add(m); RESULT =ma; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodsArray",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formalArray ::= 
            {
              ParserArray<Formals> RESULT =null;
		 System.out.println("formalArray2"); RESULT=new ParserArray<Formals>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalArray",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formalArray ::= formalArray formals COMMA 
            {
              ParserArray<Formals> RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Formals> fa = (ParserArray<Formals>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formals f = (Formals)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("formalArray1"); fa.add(f); RESULT =fa; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalArray",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fieldsArray ::= 
            {
              ParserArray<Field> RESULT =null;
		 System.out.println("fieldArray2"); RESULT=new ParserArray<Field>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldsArray",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fieldsArray ::= fieldsArray field 
            {
              ParserArray<Field> RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Field> fa = (ParserArray<Field>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("fieldArray1"); fa.add(f);System.out.println(fa.toString()); RESULT =fa; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldsArray",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // classBody ::= 
            {
              ClassBody RESULT =null;
		RESULT = new ClassBody(0,0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // classBody ::= classBody method 
            {
              ClassBody RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassBody cb = (ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("add method to class body"); cb.addMethod(m);System.out.println("add field to class body"); RESULT=cb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // classBody ::= classBody field 
            {
              ClassBody RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassBody cb = (ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("add field to class body"); cb.addField(f);System.out.println("add field to class body"); RESULT=cb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // class ::= CLASS TYPEIDENTIFIER EXTENDS OBJECTIDENTIFIER LBRACE classBody RBRACE 
            {
              Class RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassBody bd = (ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("class2"); RESULT = new Class(0, 0, name, parent, bd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class ::= CLASS TYPEIDENTIFIER LBRACE classBody RBRACE 
            {
              Class RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassBody bd = (ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("class1"); RESULT = new Class(0, 0, name, bd );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expArray ::= 
            {
              ParserArray<Expressions> RESULT =null;
		 System.out.println("expArray3"); RESULT = new ParserArray<Expressions>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArray",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expArray ::= expArray expression SEMICOLON 
            {
              ParserArray<Expressions> RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Expressions> ea = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("expArray1"); ea.add(exp1); System.out.println(ea.toString()); RESULT = ea; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArray",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classArray ::= classArray class 
            {
              ParserArray<Class> RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Class> ca = (ParserArray<Class>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Class c = (Class)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("classArray1"); ca.add(c); RESULT =ca;  System.out.println("classArray2"); RESULT = new ParserArray<Class>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classArray",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classArray ::= 
            {
              ParserArray<Class> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("classArray",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= classArray 
            {
              Program RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserArray<Class> ca = (ParserArray<Class>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("program"); RESULT = new Program(0,0, ca); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // objectid ::= OBJECTIDENTIFIER 
            {
              Terminal RESULT =null;
		System.out.println("putain"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("objectid",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

