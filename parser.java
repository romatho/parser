
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 20 21:44:12 CET 2018
//----------------------------------------------------

package parserClasses;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 20 21:44:12 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\010\003\000\002\015" +
    "\004\000\002\015\002\000\002\017\005\000\002\017\002" +
    "\000\002\003\007\000\002\003\011\000\002\012\004\000" +
    "\002\012\004\000\002\012\002\000\002\016\005\000\002" +
    "\016\002\000\002\004\010\000\002\004\006\000\002\004" +
    "\004\000\002\004\005\000\002\004\006\000\002\004\004" +
    "\000\002\004\012\000\002\004\010\000\002\004\004\000" +
    "\002\004\005\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\006\000\002\004\010\000\002\004\004\000\002" +
    "\004\004\000\002\004\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\014\003" +
    "\000\002\014\003\000\002\005\006\000\002\005\010\000" +
    "\002\005\004\000\002\006\005\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\007\012\000\002\007\010\000\002\007\004" +
    "\000\002\002\006\000\002\002\003\000\002\020\004\000" +
    "\002\020\002\000\002\021\005\000\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\006\002\ufffe\005\ufffe\001\002\000\006\002" +
    "\000\005\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\006\002\uffff\005\uffff\001\002\000" +
    "\004\032\011\001\002\000\006\010\013\033\012\001\002" +
    "\000\010\003\ufff7\030\ufff7\034\ufff7\001\002\000\004\032" +
    "\014\001\002\000\004\033\015\001\002\000\010\003\ufff7" +
    "\030\ufff7\034\ufff7\001\002\000\010\003\017\030\022\034" +
    "\020\001\002\000\010\003\156\033\155\040\175\001\002" +
    "\000\006\002\ufffa\005\ufffa\001\002\000\010\003\ufff9\030" +
    "\ufff9\034\ufff9\001\002\000\006\035\024\037\025\001\002" +
    "\000\010\003\ufff8\030\ufff8\034\ufff8\001\002\000\006\030" +
    "\ufff5\036\152\001\002\000\014\004\033\014\032\022\026" +
    "\026\030\032\027\001\002\000\054\003\uffcb\006\uffcb\007" +
    "\uffcb\013\uffcb\020\uffcb\024\uffcb\025\uffcb\033\uffcb\034\uffcb" +
    "\036\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\001\002" +
    "\000\054\003\uffcf\006\uffcf\007\uffcf\013\uffcf\020\uffcf\024" +
    "\uffcf\025\uffcf\033\uffcf\034\uffcf\036\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\050\uffcf\051" +
    "\uffcf\052\uffcf\053\uffcf\001\002\000\054\003\uffcc\006\uffcc" +
    "\007\uffcc\013\uffcc\020\uffcc\024\uffcc\025\uffcc\033\uffcc\034" +
    "\uffcc\036\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\001" +
    "\002\000\006\024\035\040\034\001\002\000\054\003\uffce" +
    "\006\uffce\007\uffce\013\uffce\020\uffce\024\uffce\025\uffce\033" +
    "\uffce\034\uffce\036\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\045\uffce\046\uffce\050\uffce\051\uffce\052\uffce\053" +
    "\uffce\001\002\000\054\003\uffcd\006\uffcd\007\uffcd\013\uffcd" +
    "\020\uffcd\024\uffcd\025\uffcd\033\uffcd\034\uffcd\036\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\001\002\000\010\003" +
    "\uffd3\030\uffd3\034\uffd3\001\002\000\034\011\045\012\044" +
    "\015\047\016\053\017\040\021\041\023\037\027\050\030" +
    "\052\031\054\035\042\047\051\050\036\001\002\000\034" +
    "\011\045\012\044\015\047\016\053\017\040\021\041\023" +
    "\037\027\050\030\052\031\054\035\042\047\051\050\036" +
    "\001\002\000\036\003\145\011\045\012\044\015\047\016" +
    "\053\017\040\021\041\023\037\027\050\030\052\031\054" +
    "\035\042\047\051\050\036\001\002\000\016\003\142\004" +
    "\033\014\032\022\026\026\030\032\027\001\002\000\046" +
    "\006\uffd5\007\uffd5\013\uffd5\020\uffd5\025\uffd5\034\uffd5\036" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\001\002\000" +
    "\034\011\045\012\044\015\047\016\053\017\040\021\041" +
    "\023\037\027\050\030\052\031\054\035\042\047\051\050" +
    "\036\001\002\000\046\006\uffda\007\uffda\013\uffda\020\uffda" +
    "\025\uffda\034\uffda\036\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\046\uffda\050\uffda\051\uffda\052\uffda" +
    "\053\uffda\001\002\000\036\003\133\011\045\012\044\015" +
    "\047\016\053\017\040\021\041\023\037\027\050\030\052" +
    "\031\054\035\042\047\051\050\036\001\002\000\046\006" +
    "\uffd4\007\uffd4\013\uffd4\020\uffd4\025\uffd4\034\uffd4\036\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\001\002\000\030" +
    "\025\074\040\131\042\066\043\072\044\070\045\076\046" +
    "\075\050\065\051\073\052\067\053\077\001\002\000\034" +
    "\011\045\012\044\015\047\016\053\017\040\021\041\023" +
    "\037\027\050\030\052\031\054\035\042\047\051\050\036" +
    "\001\002\000\046\006\uffd8\007\uffd8\013\uffd8\020\uffd8\025" +
    "\uffd8\034\uffd8\036\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\050\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\001\002\000\034\011\045\012\044\015\047\016\053" +
    "\017\040\021\041\023\037\027\050\030\052\031\054\035" +
    "\042\047\051\050\036\001\002\000\052\006\uffd7\007\uffd7" +
    "\013\uffd7\020\uffd7\024\123\025\uffd7\034\uffd7\035\122\036" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\001\002\000" +
    "\006\003\056\030\057\001\002\000\046\006\uffd9\007\uffd9" +
    "\013\uffd9\020\uffd9\025\uffd9\034\uffd9\036\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\053\uffd9\001\002\000\046\006\uffd6\007" +
    "\uffd6\013\uffd6\020\uffd6\025\uffd6\034\uffd6\036\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\050" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\001\002\000\046\006\uffec" +
    "\007\uffec\013\uffec\020\uffec\025\uffec\034\uffec\036\uffec\040" +
    "\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec" +
    "\050\uffec\051\uffec\052\uffec\053\uffec\001\002\000\004\037" +
    "\060\001\002\000\014\004\033\014\032\022\026\026\030" +
    "\032\027\001\002\000\006\013\062\024\063\001\002\000" +
    "\034\011\045\012\044\015\047\016\053\017\040\021\041" +
    "\023\037\027\050\030\052\031\054\035\042\047\051\050" +
    "\036\001\002\000\034\011\045\012\044\015\047\016\053" +
    "\017\040\021\041\023\037\027\050\030\052\031\054\035" +
    "\042\047\051\050\036\001\002\000\030\013\071\025\074" +
    "\042\066\043\072\044\070\045\076\046\075\050\065\051" +
    "\073\052\067\053\077\001\002\000\034\011\045\012\044" +
    "\015\047\016\053\017\040\021\041\023\037\027\050\030" +
    "\052\031\054\035\042\047\051\050\036\001\002\000\034" +
    "\011\045\012\044\015\047\016\053\017\040\021\041\023" +
    "\037\027\050\030\052\031\054\035\042\047\051\050\036" +
    "\001\002\000\034\011\045\012\044\015\047\016\053\017" +
    "\040\021\041\023\037\027\050\030\052\031\054\035\042" +
    "\047\051\050\036\001\002\000\034\011\045\012\044\015" +
    "\047\016\053\017\040\021\041\023\037\027\050\030\052" +
    "\031\054\035\042\047\051\050\036\001\002\000\034\011" +
    "\045\012\044\015\047\016\053\017\040\021\041\023\037" +
    "\027\050\030\052\031\054\035\042\047\051\050\036\001" +
    "\002\000\034\011\045\012\044\015\047\016\053\017\040" +
    "\021\041\023\037\027\050\030\052\031\054\035\042\047" +
    "\051\050\036\001\002\000\034\011\045\012\044\015\047" +
    "\016\053\017\040\021\041\023\037\027\050\030\052\031" +
    "\054\035\042\047\051\050\036\001\002\000\004\030\103" +
    "\001\002\000\034\011\045\012\044\015\047\016\053\017" +
    "\040\021\041\023\037\027\050\030\052\031\054\035\042" +
    "\047\051\050\036\001\002\000\034\011\045\012\044\015" +
    "\047\016\053\017\040\021\041\023\037\027\050\030\052" +
    "\031\054\035\042\047\051\050\036\001\002\000\034\011" +
    "\045\012\044\015\047\016\053\017\040\021\041\023\037" +
    "\027\050\030\052\031\054\035\042\047\051\050\036\001" +
    "\002\000\046\006\uffe2\007\uffe2\013\uffe2\020\uffe2\025\uffe2" +
    "\034\uffe2\036\uffe2\040\uffe2\041\uffe2\042\uffe2\043\072\044" +
    "\070\045\076\046\uffe2\050\uffe2\051\uffe2\052\067\053\uffe2" +
    "\001\002\000\042\006\uffe5\007\uffe5\013\uffe5\020\uffe5\025" +
    "\uffe5\034\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\046\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\001\002\000" +
    "\046\006\uffe0\007\uffe0\013\uffe0\020\uffe0\025\uffe0\034\uffe0" +
    "\036\uffe0\040\uffe0\041\uffe0\042\uffe0\043\072\044\070\045" +
    "\076\046\uffe0\050\uffe0\051\uffe0\052\067\053\uffe0\001\002" +
    "\000\004\035\104\001\002\000\036\011\uffc2\012\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\021\uffc2\023\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\035\uffc2\036\uffc4\047\uffc2\050\uffc2\001\002\000" +
    "\004\036\111\001\002\000\034\011\045\012\044\015\047" +
    "\016\053\017\040\021\041\023\037\027\050\030\052\031" +
    "\054\035\042\047\051\050\036\001\002\000\032\025\074" +
    "\036\uffc5\041\110\042\066\043\072\044\070\045\076\046" +
    "\075\050\065\051\073\052\067\053\077\001\002\000\034" +
    "\011\uffc3\012\uffc3\015\uffc3\016\uffc3\017\uffc3\021\uffc3\023" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\035\uffc3\047\uffc3\050\uffc3" +
    "\001\002\000\046\006\uffdd\007\uffdd\013\uffdd\020\uffdd\025" +
    "\uffdd\034\uffdd\036\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\001\002\000\046\006\uffe4\007\uffe4\013\uffe4\020\uffe4" +
    "\025\074\034\uffe4\036\uffe4\040\uffe4\041\uffe4\042\066\043" +
    "\072\044\070\045\076\046\075\050\uffe4\051\uffe4\052\067" +
    "\053\077\001\002\000\046\006\uffe7\007\uffe7\013\uffe7\020" +
    "\uffe7\025\uffe7\034\uffe7\036\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\044\070\045\076\046\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\001\002\000\046\006\uffee\007\uffee\013\uffee" +
    "\020\uffee\025\074\034\uffee\036\uffee\040\uffee\041\uffee\042" +
    "\066\043\072\044\070\045\076\046\075\050\065\051\073" +
    "\052\067\053\077\001\002\000\042\006\uffe6\007\uffe6\013" +
    "\uffe6\020\uffe6\025\uffe6\034\uffe6\036\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\046\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\001\002\000\046\006\uffe1\007\uffe1\013\uffe1\020\uffe1" +
    "\025\uffe1\034\uffe1\036\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\072\044\070\045\076\046\uffe1\050\uffe1\051\uffe1\052\067" +
    "\053\uffe1\001\002\000\046\006\uffdf\007\uffdf\013\uffdf\020" +
    "\uffdf\025\uffdf\034\uffdf\036\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\072\044\070\045\076\046\uffdf\050\uffdf\051\uffdf\052" +
    "\067\053\uffdf\001\002\000\046\006\uffe3\007\uffe3\013\uffe3" +
    "\020\uffe3\025\074\034\uffe3\036\uffe3\040\uffe3\041\uffe3\042" +
    "\066\043\072\044\070\045\076\046\075\050\uffe3\051\uffe3" +
    "\052\067\053\077\001\002\000\046\006\uffed\007\uffed\013" +
    "\uffed\020\uffed\025\074\034\uffed\036\uffed\040\uffed\041\uffed" +
    "\042\066\043\072\044\070\045\076\046\075\050\065\051" +
    "\073\052\067\053\077\001\002\000\036\011\uffc2\012\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\021\uffc2\023\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\035\uffc2\036\uffc4\047\uffc2\050\uffc2\001\002" +
    "\000\034\011\045\012\044\015\047\016\053\017\040\021" +
    "\041\023\037\027\050\030\052\031\054\035\042\047\051" +
    "\050\036\001\002\000\046\006\uffeb\007\uffeb\013\uffeb\020" +
    "\uffeb\025\uffeb\034\uffeb\036\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\043\072\044\070\045\076\046\uffeb\050\uffeb\051\uffeb\052" +
    "\067\053\uffeb\001\002\000\004\036\126\001\002\000\046" +
    "\006\uffde\007\uffde\013\uffde\020\uffde\025\uffde\034\uffde\036" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\046\uffde\050\uffde\051\uffde\052\uffde\053\uffde\001\002\000" +
    "\046\006\uffea\007\uffea\013\uffea\020\uffea\025\074\034\uffea" +
    "\036\uffea\040\uffea\041\uffea\042\066\043\072\044\070\045" +
    "\076\046\075\050\065\051\073\052\067\053\077\001\002" +
    "\000\046\006\uffe8\007\uffe8\013\uffe8\020\uffe8\025\uffe8\034" +
    "\uffe8\036\uffe8\040\uffe8\041\uffe8\042\uffe8\043\072\044\070" +
    "\045\076\046\uffe8\050\uffe8\051\uffe8\052\067\053\uffe8\001" +
    "\002\000\010\003\uffd2\030\uffd2\034\uffd2\001\002\000\030" +
    "\020\134\025\074\042\066\043\072\044\070\045\076\046" +
    "\075\050\065\051\073\052\067\053\077\001\002\000\046" +
    "\006\ufff2\007\ufff2\013\ufff2\020\ufff2\025\ufff2\034\ufff2\036" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2" +
    "\046\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\001\002\000" +
    "\034\011\045\012\044\015\047\016\053\017\040\021\041" +
    "\023\037\027\050\030\052\031\054\035\042\047\051\050" +
    "\036\001\002\000\046\006\ufff3\007\136\013\ufff3\020\ufff3" +
    "\025\074\034\ufff3\036\ufff3\040\ufff3\041\ufff3\042\066\043" +
    "\072\044\070\045\076\046\075\050\065\051\073\052\067" +
    "\053\077\001\002\000\034\011\045\012\044\015\047\016" +
    "\053\017\040\021\041\023\037\027\050\030\052\031\054" +
    "\035\042\047\051\050\036\001\002\000\046\006\ufff4\007" +
    "\ufff4\013\ufff4\020\ufff4\025\ufff4\034\ufff4\036\ufff4\040\ufff4" +
    "\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\050" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\001\002\000\030\025\074" +
    "\036\141\042\066\043\072\044\070\045\076\046\075\050" +
    "\065\051\073\052\067\053\077\001\002\000\046\006\ufff1" +
    "\007\ufff1\013\ufff1\020\ufff1\025\ufff1\034\ufff1\036\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1" +
    "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\001\002\000\046\006" +
    "\uffdb\007\uffdb\013\uffdb\020\uffdb\025\uffdb\034\uffdb\036\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\001\002\000\046" +
    "\006\uffdc\007\uffdc\013\uffdc\020\uffdc\025\uffdc\034\uffdc\036" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\001\002\000" +
    "\030\006\146\025\074\042\066\043\072\044\070\045\076" +
    "\046\075\050\065\051\073\052\067\053\077\001\002\000" +
    "\046\006\uffef\007\uffef\013\uffef\020\uffef\025\uffef\034\uffef" +
    "\036\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045" +
    "\uffef\046\uffef\050\uffef\051\uffef\052\uffef\053\uffef\001\002" +
    "\000\034\011\045\012\044\015\047\016\053\017\040\021" +
    "\041\023\037\027\050\030\052\031\054\035\042\047\051" +
    "\050\036\001\002\000\046\006\ufff0\007\ufff0\013\ufff0\020" +
    "\ufff0\025\074\034\ufff0\036\ufff0\040\ufff0\041\ufff0\042\066" +
    "\043\072\044\070\045\076\046\075\050\065\051\073\052" +
    "\067\053\077\001\002\000\046\006\uffe9\007\uffe9\013\uffe9" +
    "\020\uffe9\025\074\034\uffe9\036\uffe9\040\uffe9\041\uffe9\042" +
    "\066\043\072\044\070\045\076\046\075\050\uffe9\051\uffe9" +
    "\052\067\053\077\001\002\000\004\030\165\001\002\000" +
    "\004\037\153\001\002\000\014\004\033\014\032\022\026" +
    "\026\030\032\027\001\002\000\006\003\156\033\155\001" +
    "\002\000\034\011\ufffc\012\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\021\ufffc\023\ufffc\027\ufffc\030\ufffc\031\ufffc\035\ufffc\047" +
    "\ufffc\050\ufffc\001\002\000\010\003\uffc6\030\uffc6\034\uffc6" +
    "\001\002\000\010\003\uffc9\030\uffc9\034\uffc9\001\002\000" +
    "\034\011\045\012\044\015\047\016\053\017\040\021\041" +
    "\023\037\027\050\030\052\031\054\035\042\047\051\050" +
    "\036\001\002\000\032\025\074\034\163\040\162\042\066" +
    "\043\072\044\070\045\076\046\075\050\065\051\073\052" +
    "\067\053\077\001\002\000\034\011\ufffd\012\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\021\ufffd\023\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\035\ufffd\047\ufffd\050\ufffd\001\002\000\010\003\uffc7" +
    "\030\uffc7\034\uffc7\001\002\000\006\036\171\041\170\001" +
    "\002\000\004\037\166\001\002\000\014\004\033\014\032" +
    "\022\026\026\030\032\027\001\002\000\006\036\uffd0\041" +
    "\uffd0\001\002\000\004\030\ufff6\001\002\000\004\037\172" +
    "\001\002\000\014\004\033\014\032\022\026\026\030\032" +
    "\027\001\002\000\006\003\156\033\155\001\002\000\010" +
    "\003\uffca\030\uffca\034\uffca\001\002\000\010\003\uffd1\030" +
    "\uffd1\034\uffd1\001\002\000\010\003\uffc8\030\uffc8\034\uffc8" +
    "\001\002\000\010\003\017\030\022\034\200\001\002\000" +
    "\006\002\ufffb\005\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\006\010\004\015\003\001\001\000\004\003" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\015\001\001\000\006\005\020\007\022\001\001\000" +
    "\004\002\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\150\001" +
    "\001\000\004\011\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\045" +
    "\013\042\014\054\001\001\000\010\004\147\013\042\014" +
    "\054\001\001\000\010\004\143\013\042\014\054\001\001" +
    "\000\004\011\142\001\001\000\002\001\001\000\010\004" +
    "\137\013\042\014\054\001\001\000\002\001\001\000\010" +
    "\004\131\013\042\014\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\127\013\042\014\054\001\001" +
    "\000\002\001\001\000\010\004\126\013\042\014\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\060\001\001\000\002\001\001\000\010\004\120" +
    "\013\042\014\054\001\001\000\010\004\063\013\042\014" +
    "\054\001\001\000\002\001\001\000\010\004\117\013\042" +
    "\014\054\001\001\000\010\004\116\013\042\014\054\001" +
    "\001\000\010\004\115\013\042\014\054\001\001\000\010" +
    "\004\114\013\042\014\054\001\001\000\010\004\113\013" +
    "\042\014\054\001\001\000\010\004\112\013\042\014\054" +
    "\001\001\000\010\004\111\013\042\014\054\001\001\000" +
    "\002\001\001\000\010\004\101\013\042\014\054\001\001" +
    "\000\010\004\100\013\042\014\054\001\001\000\010\004" +
    "\077\013\042\014\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\104\021\105\001\001\000\002\001\001\000\010\004\106" +
    "\013\042\014\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\124\021\105\001\001\000\010\004\123\013\042\014" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\134" +
    "\013\042\014\054\001\001\000\002\001\001\000\010\004" +
    "\136\013\042\014\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\146" +
    "\013\042\014\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\163\001\001\000\002\001\001\000\004" +
    "\011\153\001\001\000\004\002\156\001\001\000\004\017" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\160\013\042\014\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\172\001\001" +
    "\000\004\002\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\020\007\022\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public String filename;
  public int toReturn = 0;

  public parser(java_cup.runtime.Scanner s, String pFilename) {
      super(s);
      filename = pFilename;
  }


  public void errorMessage(int pLine, int pColumn, String pMessage)
  {
    String errorToDisp = this.filename + ":" + pLine + ":" + pColumn + ": syntax error: " + pMessage ;
     System.err.println(errorToDisp);
     this.toReturn = 1;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // argOthers ::= 
            {
              ParserArray<Expressions> RESULT =null;
		RESULT=new ParserArray<Expressions>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argOthers",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // argOthers ::= argOthers expression COMMA 
            {
              ParserArray<Expressions> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Expressions> args = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		args.add(exp1); RESULT=args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argOthers",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // argArray ::= 
            {
              ParserArray<Expressions> RESULT =null;
		RESULT=new ParserArray<Expressions>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argArray",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // argArray ::= argOthers expression 
            {
              ParserArray<Expressions> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Expressions> args = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		args.add(exp1); RESULT=args;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argArray",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // block ::= error 
            {
              Blocks RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for Method"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // block ::= LBRACE expArray expression RBRACE 
            {
              Blocks RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Expressions> ea = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ea.add(exp1); RESULT = new Blocks(0,0,ea); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // method ::= error block 
            {
              Method RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for Method"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // method ::= OBJECTIDENTIFIER LPAR RPAR COLON types block 
            {
              Method RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blocks b = (Blocks)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Method(0, 0, oi, new ParserArray<Formals>(), t, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // method ::= OBJECTIDENTIFIER LPAR formalArray formals RPAR COLON types block 
            {
              Method RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParserArray<Formals> fa = (ParserArray<Formals>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Formals f = (Formals)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blocks b = (Blocks)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		fa.add(f); RESULT = new Method(0, 0, oi, fa, t, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // types ::= UNIT 
            {
              Types RESULT =null;
		  RESULT = new Types(0,0,"unit"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // types ::= STRING 
            {
              Types RESULT =null;
		 RESULT = new Types(0,0,"string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // types ::= BOOL 
            {
              Types RESULT =null;
		  RESULT = new Types(0,0,"bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // types ::= INT32 
            {
              Types RESULT =null;
		  RESULT = new Types(0,0,"int32"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // types ::= TYPEIDENTIFIER 
            {
              Types RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Types(0,0,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // formals ::= OBJECTIDENTIFIER COLON types 
            {
              Formals RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Formals(0,0,oi,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // field ::= error SEMICOLON 
            {
              Field RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for Field"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // field ::= OBJECTIDENTIFIER COLON types ASSIGN expression SEMICOLON 
            {
              Field RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Field(0,0,oi,t,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // field ::= OBJECTIDENTIFIER COLON types SEMICOLON 
            {
              Field RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Field(0,0,oi,t,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // boolean ::= FALSE 
            {
              Terminal RESULT =null;
		 RESULT = new Terminal(0, 0, "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // boolean ::= TRUE 
            {
              Terminal RESULT =null;
		 RESULT = new Terminal(0, 0, "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // terminaison ::= boolean 
            {
              Terminal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Terminal b = (Terminal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminaison",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // terminaison ::= OBJECTIDENTIFIER 
            {
              Terminal RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Terminal(0, 0, oi); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminaison",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // terminaison ::= STRINGLITERAL 
            {
              Terminal RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Terminal(0, 0, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminaison",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // terminaison ::= INTEGERLITERAL 
            {
              Terminal RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Terminal(0, 0, it); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminaison",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= terminaison 
            {
              Expressions RESULT =null;
		int terleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int terright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Terminal ter = (Terminal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ter; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= NEW error 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for new expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= NEW types 
            {
              Expressions RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Types ti = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new New(0, 0, ti);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression DOT OBJECTIDENTIFIER LPAR argArray RPAR 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Expressions> aa = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Call(0, 0, exp1, oi, aa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= OBJECTIDENTIFIER LPAR argArray RPAR 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Expressions> aa = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Call(0, 0, new Terminal(0, 0, "self"), oi, aa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression AND expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "AND", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression DIV expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "//", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression POW expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "^", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression TIMES expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "*", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression MINUS expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "-", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression PLUS expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "+", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression LOWEREQUAL expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "<=", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression LOWER expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "<", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression EQUAL expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "=", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= ISNULL expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnOp(0, 0, "isnull", exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= MINUS expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnOp(0, 0, "-", exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= NOT expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnOp(0, 0, "not", exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= OBJECTIDENTIFIER ASSIGN expression 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Assign(0, 0, oi, exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= LET error 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for let expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= LET OBJECTIDENTIFIER COLON types IN expression 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Types ti = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Let(0, 0, oi, ti, exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= LET OBJECTIDENTIFIER COLON types ASSIGN expression IN expression 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Types ti = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Let(0, 0, oi, ti, exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= WHILE error 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for while expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= WHILE expression DO expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new While(0, 0, exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= LPAR expression RPAR 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = exp1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= IF error 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for if expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= IF expression THEN expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(0, 0, exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= IF expression THEN expression ELSE expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp3 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(0, 0, exp1, exp2, exp3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formalArray ::= 
            {
              ParserArray<Formals> RESULT =null;
		 RESULT=new ParserArray<Formals>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalArray",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formalArray ::= formalArray formals COMMA 
            {
              ParserArray<Formals> RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Formals> fa = (ParserArray<Formals>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formals f = (Formals)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  fa.add(f); RESULT =fa; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalArray",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // classBody ::= 
            {
              ClassBody RESULT =null;
		RESULT = new ClassBody(0,0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // classBody ::= classBody method 
            {
              ClassBody RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassBody cb = (ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cb.addMethod(m); RESULT=cb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // classBody ::= classBody field 
            {
              ClassBody RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassBody cb = (ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cb.addField(f); RESULT=cb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_ ::= CLASS TYPEIDENTIFIER EXTENDS TYPEIDENTIFIER LBRACE classBody RBRACE 
            {
              Classe RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassBody bd = (ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Classe(0, 0, name, parent, bd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_ ::= CLASS TYPEIDENTIFIER LBRACE classBody RBRACE 
            {
              Classe RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassBody bd = (ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Classe(0, 0, name, bd );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expArray ::= 
            {
              ParserArray<Expressions> RESULT =null;
		 RESULT = new ParserArray<Expressions>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArray",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expArray ::= expArray expression SEMICOLON 
            {
              ParserArray<Expressions> RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Expressions> ea = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ea.add(exp1); RESULT = ea; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArray",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classArray ::= 
            {
              ParserArray<Classe> RESULT =null;
		 RESULT = new ParserArray<Classe>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classArray",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classArray ::= classArray class_ 
            {
              ParserArray<Classe> RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Classe> ca = (ParserArray<Classe>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Classe c = (Classe)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ca.add(c); RESULT = ca; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classArray",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= classArray 
            {
              Program RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserArray<Classe> ca = (ParserArray<Classe>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(0,0, ca); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

