
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 20 09:28:04 CET 2018
//----------------------------------------------------

package parserClasses;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 20 09:28:04 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\010\003\000\002\014" +
    "\004\000\002\014\002\000\002\020\005\000\002\020\002" +
    "\000\002\003\010\000\002\003\012\000\002\016\004\000" +
    "\002\016\002\000\002\015\005\000\002\015\002\000\002" +
    "\017\004\000\002\017\002\000\002\004\010\000\002\004" +
    "\006\000\002\004\006\000\002\004\012\000\002\004\010" +
    "\000\002\004\005\000\002\004\004\000\002\004\005\000" +
    "\002\004\004\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\010\000\002\004\006\000\002\004\006\000" +
    "\002\004\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\003\000\002\013\003\000\002\005" +
    "\006\000\002\005\010\000\002\006\005\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\007\011\000\002\002\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\006\002\ufffe\005\ufffe\001\002\000\006\002" +
    "\000\005\007\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\031\011\001\002\000\006\002" +
    "\uffff\005\uffff\001\002\000\006\010\013\033\012\001\002" +
    "\000\006\031\ufff8\034\ufff8\001\002\000\004\031\014\001" +
    "\002\000\004\033\015\001\002\000\006\031\ufff8\034\ufff8" +
    "\001\002\000\006\031\021\034\ufff4\001\002\000\006\031" +
    "\145\034\144\001\002\000\006\031\ufff9\034\ufff9\001\002" +
    "\000\004\037\022\001\002\000\014\004\030\014\027\022" +
    "\023\026\025\030\024\001\002\000\014\013\uffd1\024\uffd1" +
    "\033\uffd1\040\uffd1\041\uffd1\001\002\000\014\013\uffd5\024" +
    "\uffd5\033\uffd5\040\uffd5\041\uffd5\001\002\000\014\013\uffd2" +
    "\024\uffd2\033\uffd2\040\uffd2\041\uffd2\001\002\000\006\024" +
    "\032\040\031\001\002\000\014\013\uffd4\024\uffd4\033\uffd4" +
    "\040\uffd4\041\uffd4\001\002\000\014\013\uffd3\024\uffd3\033" +
    "\uffd3\040\uffd3\041\uffd3\001\002\000\006\031\uffd8\034\uffd8" +
    "\001\002\000\032\011\041\012\040\015\042\016\050\017" +
    "\035\021\036\023\034\027\044\031\046\032\047\047\045" +
    "\050\033\001\002\000\004\024\142\001\002\000\032\011" +
    "\041\012\040\015\042\016\050\017\035\021\036\023\034" +
    "\027\044\031\046\032\047\047\045\050\033\001\002\000" +
    "\004\035\134\001\002\000\042\006\uffda\007\uffda\013\uffda" +
    "\020\uffda\025\uffda\034\uffda\040\uffda\042\uffda\043\uffda\044" +
    "\uffda\045\uffda\046\uffda\050\uffda\051\uffda\052\uffda\053\uffda" +
    "\001\002\000\042\006\uffde\007\uffde\013\uffde\020\uffde\025" +
    "\uffde\034\uffde\040\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\046\uffde\050\uffde\051\uffde\052\uffde\053\uffde\001\002\000" +
    "\032\011\041\012\040\015\042\016\050\017\035\021\036" +
    "\023\034\027\044\031\046\032\047\047\045\050\033\001" +
    "\002\000\042\006\uffd9\007\uffd9\013\uffd9\020\uffd9\025\uffd9" +
    "\034\uffd9\040\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\001\002\000\032" +
    "\011\041\012\040\015\042\016\050\017\035\021\036\023" +
    "\034\027\044\031\046\032\047\047\045\050\033\001\002" +
    "\000\030\025\067\040\125\042\061\043\065\044\063\045" +
    "\071\046\070\050\060\051\066\052\062\053\072\001\002" +
    "\000\042\006\uffdc\007\uffdc\013\uffdc\020\uffdc\025\uffdc\034" +
    "\uffdc\040\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\001\002\000\032\011" +
    "\041\012\040\015\042\016\050\017\035\021\036\023\034" +
    "\027\044\031\046\032\047\047\045\050\033\001\002\000" +
    "\006\024\120\035\117\001\002\000\042\006\uffdd\007\uffdd" +
    "\013\uffdd\020\uffdd\025\uffdd\034\uffdd\040\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\050\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\001\002\000\004\031\052\001\002\000\042\006" +
    "\uffdb\007\uffdb\013\uffdb\020\uffdb\025\uffdb\034\uffdb\040\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\001\002\000\004\037\053\001\002" +
    "\000\014\004\030\014\027\022\023\026\025\030\024\001" +
    "\002\000\006\013\055\024\056\001\002\000\032\011\041" +
    "\012\040\015\042\016\050\017\035\021\036\023\034\027" +
    "\044\031\046\032\047\047\045\050\033\001\002\000\032" +
    "\011\041\012\040\015\042\016\050\017\035\021\036\023" +
    "\034\027\044\031\046\032\047\047\045\050\033\001\002" +
    "\000\030\013\064\025\067\042\061\043\065\044\063\045" +
    "\071\046\070\050\060\051\066\052\062\053\072\001\002" +
    "\000\032\011\041\012\040\015\042\016\050\017\035\021" +
    "\036\023\034\027\044\031\046\032\047\047\045\050\033" +
    "\001\002\000\032\011\041\012\040\015\042\016\050\017" +
    "\035\021\036\023\034\027\044\031\046\032\047\047\045" +
    "\050\033\001\002\000\032\011\041\012\040\015\042\016" +
    "\050\017\035\021\036\023\034\027\044\031\046\032\047" +
    "\047\045\050\033\001\002\000\032\011\041\012\040\015" +
    "\042\016\050\017\035\021\036\023\034\027\044\031\046" +
    "\032\047\047\045\050\033\001\002\000\032\011\041\012" +
    "\040\015\042\016\050\017\035\021\036\023\034\027\044" +
    "\031\046\032\047\047\045\050\033\001\002\000\032\011" +
    "\041\012\040\015\042\016\050\017\035\021\036\023\034" +
    "\027\044\031\046\032\047\047\045\050\033\001\002\000" +
    "\032\011\041\012\040\015\042\016\050\017\035\021\036" +
    "\023\034\027\044\031\046\032\047\047\045\050\033\001" +
    "\002\000\004\031\076\001\002\000\032\011\041\012\040" +
    "\015\042\016\050\017\035\021\036\023\034\027\044\031" +
    "\046\032\047\047\045\050\033\001\002\000\032\011\041" +
    "\012\040\015\042\016\050\017\035\021\036\023\034\027" +
    "\044\031\046\032\047\047\045\050\033\001\002\000\032" +
    "\011\041\012\040\015\042\016\050\017\035\021\036\023" +
    "\034\027\044\031\046\032\047\047\045\050\033\001\002" +
    "\000\042\006\uffe5\007\uffe5\013\uffe5\020\uffe5\025\uffe5\034" +
    "\uffe5\040\uffe5\042\uffe5\043\065\044\063\045\071\046\uffe5" +
    "\050\uffe5\051\uffe5\052\062\053\uffe5\001\002\000\034\006" +
    "\uffe8\007\uffe8\013\uffe8\020\uffe8\025\uffe8\034\uffe8\040\uffe8" +
    "\042\uffe8\046\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\001" +
    "\002\000\042\006\uffe3\007\uffe3\013\uffe3\020\uffe3\025\uffe3" +
    "\034\uffe3\040\uffe3\042\uffe3\043\065\044\063\045\071\046" +
    "\uffe3\050\uffe3\051\uffe3\052\062\053\uffe3\001\002\000\004" +
    "\035\077\001\002\000\006\031\ufff6\036\ufff6\001\002\000" +
    "\006\031\103\036\102\001\002\000\004\041\106\001\002" +
    "\000\042\006\uffe1\007\uffe1\013\uffe1\020\uffe1\025\uffe1\034" +
    "\uffe1\040\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\050\uffe1\051\uffe1\052\uffe1\053\uffe1\001\002\000\004\037" +
    "\104\001\002\000\014\004\030\014\027\022\023\026\025" +
    "\030\024\001\002\000\004\041\uffd6\001\002\000\006\031" +
    "\ufff7\036\ufff7\001\002\000\042\006\uffe7\007\uffe7\013\uffe7" +
    "\020\uffe7\025\067\034\uffe7\040\uffe7\042\061\043\065\044" +
    "\063\045\071\046\070\050\uffe7\051\uffe7\052\062\053\072" +
    "\001\002\000\034\006\uffea\007\uffea\013\uffea\020\uffea\025" +
    "\uffea\034\uffea\040\uffea\042\uffea\046\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\uffea\001\002\000\042\006\ufff0\007\ufff0\013" +
    "\ufff0\020\ufff0\025\067\034\ufff0\040\ufff0\042\061\043\065" +
    "\044\063\045\071\046\070\050\060\051\066\052\062\053" +
    "\072\001\002\000\034\006\uffe9\007\uffe9\013\uffe9\020\uffe9" +
    "\025\uffe9\034\uffe9\040\uffe9\042\uffe9\046\uffe9\050\uffe9\051" +
    "\uffe9\052\uffe9\053\uffe9\001\002\000\042\006\uffe4\007\uffe4" +
    "\013\uffe4\020\uffe4\025\uffe4\034\uffe4\040\uffe4\042\uffe4\043" +
    "\065\044\063\045\071\046\uffe4\050\uffe4\051\uffe4\052\062" +
    "\053\uffe4\001\002\000\042\006\uffe2\007\uffe2\013\uffe2\020" +
    "\uffe2\025\uffe2\034\uffe2\040\uffe2\042\uffe2\043\065\044\063" +
    "\045\071\046\uffe2\050\uffe2\051\uffe2\052\062\053\uffe2\001" +
    "\002\000\042\006\uffe6\007\uffe6\013\uffe6\020\uffe6\025\067" +
    "\034\uffe6\040\uffe6\042\061\043\065\044\063\045\071\046" +
    "\070\050\uffe6\051\uffe6\052\062\053\072\001\002\000\042" +
    "\006\uffef\007\uffef\013\uffef\020\uffef\025\067\034\uffef\040" +
    "\uffef\042\061\043\065\044\063\045\071\046\070\050\060" +
    "\051\066\052\062\053\072\001\002\000\006\031\ufff6\036" +
    "\ufff6\001\002\000\032\011\041\012\040\015\042\016\050" +
    "\017\035\021\036\023\034\027\044\031\046\032\047\047" +
    "\045\050\033\001\002\000\042\006\uffee\007\uffee\013\uffee" +
    "\020\uffee\025\uffee\034\uffee\040\uffee\042\uffee\043\065\044" +
    "\063\045\071\046\uffee\050\uffee\051\uffee\052\062\053\uffee" +
    "\001\002\000\006\031\103\036\123\001\002\000\042\006" +
    "\uffdf\007\uffdf\013\uffdf\020\uffdf\025\uffdf\034\uffdf\040\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\053\uffdf\001\002\000\042\006\uffed\007\uffed" +
    "\013\uffed\020\uffed\025\067\034\uffed\040\uffed\042\061\043" +
    "\065\044\063\045\071\046\070\050\060\051\066\052\062" +
    "\053\072\001\002\000\006\031\uffd7\034\uffd7\001\002\000" +
    "\042\006\uffeb\007\uffeb\013\uffeb\020\uffeb\025\uffeb\034\uffeb" +
    "\040\uffeb\042\uffeb\043\065\044\063\045\071\046\uffeb\050" +
    "\uffeb\051\uffeb\052\062\053\uffeb\001\002\000\030\020\130" +
    "\025\067\042\061\043\065\044\063\045\071\046\070\050" +
    "\060\051\066\052\062\053\072\001\002\000\032\011\041" +
    "\012\040\015\042\016\050\017\035\021\036\023\034\027" +
    "\044\031\046\032\047\047\045\050\033\001\002\000\042" +
    "\006\ufff2\007\132\013\ufff2\020\ufff2\025\067\034\ufff2\040" +
    "\ufff2\042\061\043\065\044\063\045\071\046\070\050\060" +
    "\051\066\052\062\053\072\001\002\000\032\011\041\012" +
    "\040\015\042\016\050\017\035\021\036\023\034\027\044" +
    "\031\046\032\047\047\045\050\033\001\002\000\042\006" +
    "\ufff3\007\ufff3\013\ufff3\020\ufff3\025\ufff3\034\ufff3\040\ufff3" +
    "\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\001\002\000\004\030\135\001\002" +
    "\000\004\036\136\001\002\000\042\006\uffe0\007\uffe0\013" +
    "\uffe0\020\uffe0\025\uffe0\034\uffe0\040\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\050\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\001\002\000\030\006\140\025\067\042\061\043\065" +
    "\044\063\045\071\046\070\050\060\051\066\052\062\053" +
    "\072\001\002\000\032\011\041\012\040\015\042\016\050" +
    "\017\035\021\036\023\034\027\044\031\046\032\047\047" +
    "\045\050\033\001\002\000\042\006\ufff1\007\ufff1\013\ufff1" +
    "\020\ufff1\025\067\034\ufff1\040\ufff1\042\061\043\065\044" +
    "\063\045\071\046\070\050\060\051\066\052\062\053\072" +
    "\001\002\000\032\011\041\012\040\015\042\016\050\017" +
    "\035\021\036\023\034\027\044\031\046\032\047\047\045" +
    "\050\033\001\002\000\042\006\uffec\007\uffec\013\uffec\020" +
    "\uffec\025\uffec\034\uffec\040\uffec\042\uffec\043\065\044\063" +
    "\045\071\046\uffec\050\uffec\051\uffec\052\062\053\uffec\001" +
    "\002\000\006\002\ufffa\005\ufffa\001\002\000\004\035\147" +
    "\001\002\000\006\031\ufff5\034\ufff5\001\002\000\006\031" +
    "\ufff6\036\ufff6\001\002\000\006\031\103\036\151\001\002" +
    "\000\004\037\152\001\002\000\014\004\030\014\027\022" +
    "\023\026\025\030\024\001\002\000\004\033\154\001\002" +
    "\000\006\034\ufffc\040\ufffc\001\002\000\006\031\uffd0\034" +
    "\uffd0\001\002\000\006\034\160\040\157\001\002\000\032" +
    "\011\041\012\040\015\042\016\050\017\035\021\036\023" +
    "\034\027\044\031\046\032\047\047\045\050\033\001\002" +
    "\000\006\031\uffcf\034\uffcf\001\002\000\032\025\067\034" +
    "\ufffd\040\ufffd\042\061\043\065\044\063\045\071\046\070" +
    "\050\060\051\066\052\062\053\072\001\002\000\006\031" +
    "\021\034\ufff4\001\002\000\006\031\145\034\164\001\002" +
    "\000\006\002\ufffb\005\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\006\010\004\014\003\001\001\000\004\003" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\015\001\001\000\006\005\017\017\016\001\001\000" +
    "\004\007\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\042\012" +
    "\036\013\050\001\001\000\002\001\001\000\010\004\136" +
    "\012\036\013\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\126\012\036\013\050" +
    "\001\001\000\002\001\001\000\010\004\125\012\036\013" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\123\012\036\013\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\053\001\001\000\002\001\001\000" +
    "\010\004\115\012\036\013\050\001\001\000\010\004\056" +
    "\012\036\013\050\001\001\000\002\001\001\000\010\004" +
    "\114\012\036\013\050\001\001\000\010\004\113\012\036" +
    "\013\050\001\001\000\010\004\112\012\036\013\050\001" +
    "\001\000\010\004\111\012\036\013\050\001\001\000\010" +
    "\004\110\012\036\013\050\001\001\000\010\004\107\012" +
    "\036\013\050\001\001\000\010\004\106\012\036\013\050" +
    "\001\001\000\002\001\001\000\010\004\074\012\036\013" +
    "\050\001\001\000\010\004\073\012\036\013\050\001\001" +
    "\000\010\004\072\012\036\013\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\077\001\001\000\004\006\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\121\001\001\000\010" +
    "\004\120\012\036\013\050\001\001\000\002\001\001\000" +
    "\004\006\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\130\012\036\013\050\001\001\000\002\001\001" +
    "\000\010\004\132\012\036\013\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\140\012\036\013\050\001" +
    "\001\000\002\001\001\000\010\004\142\012\036\013\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\147\001\001\000\004" +
    "\006\100\001\001\000\002\001\001\000\004\011\152\001" +
    "\001\000\004\002\154\001\001\000\004\020\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\160\012" +
    "\036\013\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\017\017\162\001\001\000\004\007\145\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Program program;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // block ::= LBRACE expArray RBRACE 
            {
              Blocks RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Expressions> ea = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Blocks(0,0,ea); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // method ::= OBJECTIDENTIFIER LPAR formalArray RPAR COLON types block 
            {
              Method RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserArray<Formals> fa = (ParserArray<Formals>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blocks b = (Blocks)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Method(0, 0, oi, fa, t, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // types ::= UNIT 
            {
              Types RESULT =null;
		 RESULT = new Types(0,0,"unit"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // types ::= STRING 
            {
              Types RESULT =null;
		 RESULT = new Types(0,0,"string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // types ::= BOOL 
            {
              Types RESULT =null;
		 RESULT = new Types(0,0,"bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // types ::= INT32 
            {
              Types RESULT =null;
		 RESULT = new Types(0,0,"int32"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // types ::= TYPEIDENTIFIER 
            {
              Types RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =new Types(0,0,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // formals ::= OBJECTIDENTIFIER COLON types 
            {
              Formals RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =new Formals(0,0,oi,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // field ::= OBJECTIDENTIFIER COLON types ASSIGN expression SEMICOLON 
            {
              Field RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Field(0,0,oi,t,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // field ::= OBJECTIDENTIFIER COLON types SEMICOLON 
            {
              Field RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Field(0,0,oi,t,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // boolean ::= FALSE 
            {
              Terminal RESULT =null;
		RESULT = new Terminal(0, 0, "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // boolean ::= TRUE 
            {
              Terminal RESULT =null;
		RESULT = new Terminal(0, 0, "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // terminaison ::= boolean 
            {
              Terminal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Terminal b = (Terminal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminaison",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // terminaison ::= STRINGLITERAL 
            {
              Terminal RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Terminal(0, 0, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminaison",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // terminaison ::= INTEGERLITERAL 
            {
              Terminal RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Terminal(0, 0, it); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminaison",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= terminaison 
            {
              Expressions RESULT =null;
		int terleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int terright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Terminal ter = (Terminal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ter; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= OBJECTIDENTIFIER LPAR formalArray RPAR 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Formals> fa = (ParserArray<Formals>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Call(0, 0, "self", oi, fa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= NEW LPAR TYPEIDENTIFIER RPAR 
            {
              Expressions RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ti = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new New(0, 0, ti);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression DOT OBJECTIDENTIFIER LPAR formalArray RPAR 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Formals> fa = (ParserArray<Formals>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Call(0, 0, exp1, oi, fa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression AND expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "AND", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression DIV expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "//", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression POW expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "^", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression TIMES expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "*", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression MINUS expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "-", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression PLUS expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "+", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression LOWEREQUAL expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "<=", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression LOWER expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "<", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= expression EQUAL expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "=", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= ISNULL expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnOp(0, 0, "isnull", exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= MINUS ASSIGN expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnOp(0, 0, "-", exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= NOT expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnOp(0, 0, "not", exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= OBJECTIDENTIFIER ASSIGN expression 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Assign(0, 0, oi, exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= LET OBJECTIDENTIFIER COLON types IN expression 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Let(0, 0, oi, exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= LET OBJECTIDENTIFIER COLON types ASSIGN expression IN expression 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Let(0, 0, oi, exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= WHILE expression DO expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new While(0, 0, exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= IF expression THEN expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(0, 0, exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= IF expression THEN expression ELSE expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp3 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(0, 0, exp1, exp2, exp3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // methodsArray ::= 
            {
              ParserArray<Methods> RESULT =null;
		 RESULT=new ParserArray<Methods>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodsArray",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // methodsArray ::= methodsArray method 
            {
              ParserArray<Methods> RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Methods> ma = (ParserArray<Methods>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ma.add(m); RESULT =ma; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodsArray",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formalArray ::= 
            {
              ParserArray<Formals> RESULT =null;
		 RESULT=new ParserArray<Formals>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalArray",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formalArray ::= formalArray formals COMMA 
            {
              ParserArray<Formals> RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Formals> fa = (ParserArray<Formals>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formals f = (Formals)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		fa.add(f); RESULT =fa; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalArray",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fieldsArray ::= 
            {
              ParserArray<Fields> RESULT =null;
		 RESULT=new ParserArray<Field>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldsArray",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fieldsArray ::= fieldsArray field 
            {
              ParserArray<Fields> RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Fields> fa = (ParserArray<Fields>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		fa.add(f); RESULT =fa; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldsArray",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class ::= CLASS OBJECTIDENTIFIER EXTENDS OBJECTIDENTIFIER LBRACE fieldsArray methodsArray RBRACE 
            {
              Class RESULT =null;
		int parentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String parent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Fields> fa = (ParserArray<Fields>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Methods> ma = (ParserArray<Methods>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Class(0, 0, parent, fa, ma);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class ::= CLASS OBJECTIDENTIFIER LBRACE fieldsArray methodsArray RBRACE 
            {
              Class RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Fields> fa = (ParserArray<Fields>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Methods> ma = (ParserArray<Methods>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Class(0, 0, name, parent, fa, ma);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expArray ::= 
            {
              ParserArray<Expressions> RESULT =null;
		 RESULT=new ParserArray<Class>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArray",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expArray ::= expArray SEMICOLON expression 
            {
              ParserArray<Expressions> RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Expressions> ea = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ea.add(exp1); RESULT = ea; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArray",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classArray ::= 
            {
              ParserArray<Class> RESULT =null;
		 RESULT=new ParserArray<Class>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classArray",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classArray ::= classArray class 
            {
              ParserArray<Class> RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Class> ca = (ParserArray<Class>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Class c = (Class)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ca.add(c); RESULT =ca; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classArray",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= classArray 
            {
              Program RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserArray<Class> ca = (ParserArray<Class>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(0,0, ca); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

