import java_cup.runtime.*;
import parserClasses.*;



parser code
{:
  public String filename;
  public int toReturn = 0;

  public parser(java_cup.runtime.Scanner s, String pFilename) {
      super(s);
      filename = pFilename;
  }


  public void errorMessage(int pLine, int pColumn, String pMessage)
  {
    String errorToDisp = this.filename + ":" + pLine + ":" + pColumn + ": syntax error: " + pMessage ;
     System.err.println(errorToDisp);
     this.toReturn = 1;
  }

:};



terminal BOOL, CLASS, DO, ELSE, EXTENDS, FALSE, IF, IN, INT32, ISNULL, LET, NEW, THEN, TRUE, UNIT, WHILE, ASSIGN, DOT;

terminal String STRING, STRING_LITERAL, OBJECT_IDENTIFIER, INTEGER_LITERAL, TYPE_IDENTIFIER;

terminal LBRACE, RBRACE, LPAR, RPAR, COLON, SEMICOLON, COMMA;

terminal AND, EQUAL, LOWER, LOWER_EQUAL, DIV, NOT, MINUS, PLUS, POW, TIMES;



non terminal Blocks block;
non terminal Classe class_; /*done*/
non terminal Expressions expression;/*done*/
non terminal Field field; /*done*/
non terminal Formals formals; /*done*/
non terminal Method method; /*done*/
non terminal Program program; /*done*/
non terminal Types types; /*done*/
non terminal ClassBody classBody;


/*Expression*/
/*non terminal Assign assign;
non terminal BinOp binop;
non terminal Call call;
non terminal If if;
non terminal Let let;
non terminal New new;
non terminal Unop unop;
non terminal While while;*/
non terminal Terminal terminaison, boolean;

non terminal ParserArray<Classe> classArray; /*done*/
non terminal ParserArray<Formals> formalArray;/*done*/
non terminal ParserArray<Expressions> expArray, argArray, argOthers; /*done*/




precedence right ASSIGN;
precedence left AND;
precedence right NOT;
precedence nonassoc LOWER, LOWER_EQUAL, EQUAL, IF;
precedence nonassoc ELSE;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence right ISNULL;
precedence left POW;
precedence left DOT;




start with program;

program ::=     classArray:ca
                {: RESULT = new Program(0,0, ca); :};

classArray::=   classArray:ca class_:c {: ca.add(c); RESULT = ca; :}
                |                     {: RESULT = new ParserArray<Classe>(); :};


expArray::=     expArray:ea expression:exp1 SEMICOLON {: ea.add(exp1); RESULT = ea; :}
                |                     {: RESULT = new ParserArray<Expressions>(); :};

class_::=        CLASS:c TYPE_IDENTIFIER:name LBRACE classBody:bd  RBRACE
                {: RESULT = new Classe(cleft, cright, name, bd );:}
                |CLASS:c TYPE_IDENTIFIER:name EXTENDS TYPE_IDENTIFIER:parent LBRACE classBody:bd  RBRACE
                {: RESULT = new Classe(cleft, cright, name, parent, bd);:}
                |CLASS error:e
                {: parser.errorMessage(eleft, eright, "Wrong syntax for class expression"); :};

classBody::=    classBody:cb   field:f
                {: cb.addField(f); RESULT=cb; :}
                |classBody:cb method:m
                {: cb.addMethod(m); RESULT=cb;:}
                |
                {:RESULT = new ClassBody(0,0); :}
                |classBody:cb error:e
                {: parser.errorMessage(eleft, eright, "Wrong syntax for bodyClass"); :};

formalArray::=  formalArray:fa formals:f  COMMA{:  fa.add(f); RESULT =fa; :}
                |                     {: RESULT=new ParserArray<Formals>(); :};


                /*If*/
expression::=   IF:i expression:exp1 THEN expression:exp2 ELSE expression:exp3
                {:RESULT = new If(ileft, iright, exp1, exp2, exp3); :}
                |IF:i expression:exp1 THEN expression:exp2
                {:RESULT = new If(ileft, iright, exp1, exp2); :}
                |IF error:e
                {: parser.errorMessage(eleft, eright, "Wrong syntax for if expression"); :}

                /*exp = (exp)*/
                | LPAR expression:exp1 RPAR
                {:RESULT = exp1; :}

                /*While*/
                | WHILE:w expression:exp1 DO expression:exp2
                {:RESULT = new While(wleft, wright, exp1, exp2); :}
                |WHILE expression:exp error:e
                {: parser.errorMessage(eleft, eright, "Wrong syntax for while expression"); :}

                /*Let*/
                |LET:l OBJECT_IDENTIFIER:oi COLON types:ti ASSIGN expression:exp1 IN expression:exp2
                {:RESULT = new Let(lleft,lright, oi, ti, exp2, exp1); :}
                |LET:l OBJECT_IDENTIFIER:oi COLON types:ti IN expression:exp1
                {:RESULT = new Let(lleft,lright, oi, ti, exp1); :}
                |LET error:e
                {: parser.errorMessage(eleft, eright, "Wrong syntax for let expression"); :}

                /*Assign*/
                |OBJECT_IDENTIFIER:oi ASSIGN expression:exp1
                {:RESULT = new Assign(oileft, oiright, oi, exp1); :}

                /*UnOp*/
                |NOT:unop expression:exp1
                {:RESULT = new UnOp(unopleft, unopright, "not", exp1); :}
                |MINUS:unop expression:exp1
                {:RESULT = new UnOp(unopleft, unopright, "-", exp1); :}
                |ISNULL:unop expression:exp1
                {:RESULT = new UnOp(unopleft, unopright, "isnull", exp1); :}

                /*BinOp*/
                |expression:exp1 EQUAL:binop expression:exp2
                {:RESULT = new BinOp(binopleft, binopright, "=", exp1, exp2); :}
                |expression:exp1 LOWER:binop expression:exp2
                {:RESULT = new BinOp(binopleft, binopright, "<", exp1, exp2); :}
                |expression:exp1 LOWER_EQUAL:binop expression:exp2
                {:RESULT = new BinOp(binopleft, binopright, "<=", exp1, exp2); :}
                |expression:exp1 PLUS:binop expression:exp2
                {:RESULT = new BinOp(binopleft, binopright, "+", exp1, exp2); :}
                |expression:exp1 MINUS:binop expression:exp2
                {:RESULT = new BinOp(binopleft, binopright, "-", exp1, exp2); :}
                |expression:exp1 TIMES:binop expression:exp2
                {:RESULT = new BinOp(binopleft, binopright, "*", exp1, exp2); :}
                |expression:exp1 POW:binop expression:exp2
                {:RESULT = new BinOp(binopleft, binopright, "^", exp1, exp2); :}
                |expression:exp1 DIV:binop expression:exp2
                {:RESULT = new BinOp(binopleft, binopright, "/", exp1, exp2); :}
                |expression:exp1 AND:binop expression:exp2
                {:RESULT = new BinOp(binopleft, binopright, "and", exp1, exp2); :}

                /*Call*/
                |OBJECT_IDENTIFIER:oi LPAR argArray:aa RPAR
                {:RESULT = new Call(oileft, oiright, new Terminal(oileft, oiright, "self","SELF"), oi, aa); :}
                |expression:exp1 DOT OBJECT_IDENTIFIER:oi LPAR argArray:aa RPAR
                {:RESULT = new Call(exp1left, exp1right, exp1, oi, aa); :}

                /*New*/
                |NEW:n types:ti
                {:RESULT = new New(nleft, nright, ti);:}
                |NEW error:e
                {: parser.errorMessage(eleft, eright, "Wrong syntax for new expression"); :}

                /*block*/
                | block:b
                {: RESULT = b; :}

                |terminaison:ter
                {:RESULT = ter; :}
                |LPAR:l RPAR
                {: RESULT = new Terminal(lleft, lright, "()","unit"); :};

                /*Terminaison*/

terminaison::=  INTEGER_LITERAL:it
                {: RESULT = new Terminal(itleft, itright, it,"int32"); :}
                |STRING_LITERAL:sl
                {: RESULT = new Terminal(slleft, slright, sl,"string"); :}
                |OBJECT_IDENTIFIER:oi
                {: RESULT = new Terminal(oileft, oiright, oi,"OI"); :}
                |boolean:b
                {: RESULT = b; :};

boolean::=      TRUE:b
                {: RESULT = new Terminal(bleft, bright, "true","bool"); :}
                |FALSE:b
                {: RESULT = new Terminal(bleft, bright, "false","bool"); :};

field::=        OBJECT_IDENTIFIER:oi COLON types:t SEMICOLON
                {:  RESULT = new Field(oileft, oiright,oi,t,null); :}
                |OBJECT_IDENTIFIER:oi COLON types:t ASSIGN expression:e SEMICOLON
                {: RESULT = new Field(oileft, oiright,oi,t,e); :}
                |error:e SEMICOLON
                {: parser.errorMessage(eleft, eright, "Wrong syntax for Field"); :}
                |OBJECT_IDENTIFIER:oi COLON types:t error:e
                {: parser.errorMessage(eleft, eright, "Wrong syntax for Field"); :};

formals::=      OBJECT_IDENTIFIER:oi COLON types:t
                {: RESULT = new Formals(oileft, oiright,oi,t); :};


types::=        TYPE_IDENTIFIER:t
                {: RESULT = new Types(tleft, tright,t); :}
                | INT32:t
                {:  RESULT = new Types(tleft, tright,"int32"); :}
                | BOOL:t
                {:  RESULT = new Types(tleft, tright,"bool"); :}
                | STRING:t
                {: RESULT = new Types(tleft, tright,"string"); :}
                | UNIT:t
                {:  RESULT = new Types(tleft, tright,"unit"); :};

method::=       OBJECT_IDENTIFIER:oi LPAR formalArray:fa formals:f RPAR COLON types:t block:b
                {:fa.add(f); RESULT = new Method(oileft, oiright, oi, fa, t, b); :}
                |OBJECT_IDENTIFIER:oi LPAR  RPAR COLON types:t block:b
                {: RESULT = new Method(oileft, oiright, oi, new ParserArray<Formals>(), t, b); :}
                |error:e block
                {: parser.errorMessage(eleft, eright, "Wrong syntax for Method"); :};


block::=        LBRACE expArray:ea expression:exp1 RBRACE
                {: ea.add(exp1); RESULT = new Blocks(ealeft, earight,ea); :};


argArray::=     argOthers:args expression:exp1
                {:args.add(exp1); RESULT=args;:}
                |
                {:RESULT=new ParserArray<Expressions>(); :};

argOthers::=    argOthers:args expression:exp1 COMMA
                {:args.add(exp1); RESULT=args; :}
                |
                {:RESULT=new ParserArray<Expressions>(); :};