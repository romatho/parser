
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 24 00:10:53 GMT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import parserClasses.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 24 00:10:53 GMT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\010\003\000\002\010" +
    "\003\000\002\015\004\000\002\015\002\000\002\017\005" +
    "\000\002\017\002\000\002\003\007\000\002\003\011\000" +
    "\002\003\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\002\000\002\012\004\000\002\016\005\000\002\016" +
    "\002\000\002\004\010\000\002\004\006\000\002\004\007" +
    "\000\002\004\004\000\002\004\005\000\002\004\006\000" +
    "\002\004\005\000\002\004\012\000\002\004\010\000\002" +
    "\004\004\000\002\004\005\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\006\000\002\004\010\000\002\004" +
    "\004\000\002\004\004\000\002\004\003\000\002\004\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\014\003\000\002\014\003\000\002" +
    "\005\006\000\002\005\010\000\002\005\004\000\002\005" +
    "\006\000\002\006\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\007\012\000\002\007\010\000\002\007\004\000\002" +
    "\002\006\000\002\020\004\000\002\020\002\000\002\021" +
    "\005\000\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\010\002\ufffd\003\006\005\ufffd\001\002\000" +
    "\006\002\000\005\011\001\002\000\004\002\007\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\001\001\002\000" +
    "\006\002\ufffe\005\ufffe\001\002\000\006\003\012\032\013" +
    "\001\002\000\006\002\ufff8\005\ufff8\001\002\000\006\010" +
    "\015\033\014\001\002\000\010\003\ufff5\030\ufff5\034\ufff5" +
    "\001\002\000\004\032\016\001\002\000\004\033\017\001" +
    "\002\000\010\003\ufff5\030\ufff5\034\ufff5\001\002\000\010" +
    "\003\022\030\021\034\023\001\002\000\006\035\156\037" +
    "\157\001\002\000\014\003\ufff4\030\ufff4\033\026\034\ufff4" +
    "\040\027\001\002\000\006\002\ufff9\005\ufff9\001\002\000" +
    "\010\003\ufff7\030\ufff7\034\ufff7\001\002\000\010\003\ufff6" +
    "\030\ufff6\034\ufff6\001\002\000\036\011\ufffb\012\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\021\ufffb\023\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\033\ufffb\035\ufffb\047\ufffb\050\ufffb\001\002\000" +
    "\010\003\uffcc\030\uffcc\034\uffcc\001\002\000\010\003\uffc2" +
    "\030\uffc2\034\uffc2\001\002\000\036\011\042\012\035\015" +
    "\047\016\044\017\046\021\034\023\032\027\037\030\052" +
    "\031\045\033\026\035\051\047\033\050\043\001\002\000" +
    "\036\011\042\012\035\015\047\016\044\017\046\021\034" +
    "\023\032\027\037\030\052\031\045\033\026\035\051\047" +
    "\033\050\043\001\002\000\036\011\042\012\035\015\047" +
    "\016\044\017\046\021\034\023\032\027\037\030\052\031" +
    "\045\033\026\035\051\047\033\050\043\001\002\000\050" +
    "\003\uffd0\006\uffd0\007\uffd0\013\uffd0\020\uffd0\025\uffd0\034" +
    "\uffd0\036\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\001" +
    "\002\000\040\003\142\011\042\012\035\015\047\016\044" +
    "\017\046\021\034\023\032\027\037\030\052\031\045\033" +
    "\026\035\051\047\033\050\043\001\002\000\050\003\uffd6" +
    "\006\uffd6\007\uffd6\013\uffd6\020\uffd6\025\uffd6\034\uffd6\036" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\001\002\000" +
    "\050\003\uffd3\006\uffd3\007\uffd3\013\uffd3\020\uffd3\025\uffd3" +
    "\034\uffd3\036\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\001\002\000\050\003\uffd5\006\uffd5\007\uffd5\013\uffd5\020" +
    "\uffd5\025\uffd5\034\uffd5\036\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\045\uffd5\046\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\001\002\000\032\025\064\034\140\040\137" +
    "\042\057\043\062\044\060\045\067\046\065\050\056\051" +
    "\063\052\061\053\066\001\002\000\050\003\uffcf\006\uffcf" +
    "\007\uffcf\013\uffcf\020\uffcf\025\uffcf\034\uffcf\036\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\050\uffcf\051\uffcf\052\uffcf\053\uffcf\001\002\000\036\011" +
    "\042\012\035\015\047\016\044\017\046\021\034\023\032" +
    "\027\037\030\052\031\045\033\026\035\051\047\033\050" +
    "\043\001\002\000\006\003\125\030\124\001\002\000\050" +
    "\003\uffd4\006\uffd4\007\uffd4\013\uffd4\020\uffd4\025\uffd4\034" +
    "\uffd4\036\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\001" +
    "\002\000\016\003\117\004\121\014\122\022\115\026\116" +
    "\032\123\001\002\000\036\011\042\012\035\015\047\016" +
    "\044\017\046\021\034\023\032\027\037\030\052\031\045" +
    "\033\026\035\051\047\033\050\043\001\002\000\050\003" +
    "\uffd1\006\uffd1\007\uffd1\013\uffd1\020\uffd1\025\uffd1\034\uffd1" +
    "\036\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\001\002" +
    "\000\036\011\042\012\035\015\047\016\044\017\046\021" +
    "\034\023\032\027\037\030\052\031\045\033\026\035\051" +
    "\047\033\050\043\001\002\000\054\003\uffd2\006\uffd2\007" +
    "\uffd2\013\uffd2\020\uffd2\024\054\025\uffd2\034\uffd2\035\053" +
    "\036\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\001\002" +
    "\000\040\011\uffbd\012\uffbd\015\uffbd\016\uffbd\017\uffbd\021" +
    "\uffbd\023\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd\035\uffbd" +
    "\036\uffbf\047\uffbd\050\uffbd\001\002\000\036\011\042\012" +
    "\035\015\047\016\044\017\046\021\034\023\032\027\037" +
    "\030\052\031\045\033\026\035\051\047\033\050\043\001" +
    "\002\000\050\003\uffe7\006\uffe7\007\uffe7\013\uffe7\020\uffe7" +
    "\025\064\034\uffe7\036\uffe7\040\uffe7\041\uffe7\042\057\043" +
    "\062\044\060\045\067\046\065\050\056\051\063\052\061" +
    "\053\066\001\002\000\036\011\042\012\035\015\047\016" +
    "\044\017\046\021\034\023\032\027\037\030\052\031\045" +
    "\033\026\035\051\047\033\050\043\001\002\000\036\011" +
    "\042\012\035\015\047\016\044\017\046\021\034\023\032" +
    "\027\037\030\052\031\045\033\026\035\051\047\033\050" +
    "\043\001\002\000\036\011\042\012\035\015\047\016\044" +
    "\017\046\021\034\023\032\027\037\030\052\031\045\033" +
    "\026\035\051\047\033\050\043\001\002\000\036\011\042" +
    "\012\035\015\047\016\044\017\046\021\034\023\032\027" +
    "\037\030\052\031\045\033\026\035\051\047\033\050\043" +
    "\001\002\000\036\011\042\012\035\015\047\016\044\017" +
    "\046\021\034\023\032\027\037\030\052\031\045\033\026" +
    "\035\051\047\033\050\043\001\002\000\036\011\042\012" +
    "\035\015\047\016\044\017\046\021\034\023\032\027\037" +
    "\030\052\031\045\033\026\035\051\047\033\050\043\001" +
    "\002\000\004\030\073\001\002\000\036\011\042\012\035" +
    "\015\047\016\044\017\046\021\034\023\032\027\037\030" +
    "\052\031\045\033\026\035\051\047\033\050\043\001\002" +
    "\000\036\011\042\012\035\015\047\016\044\017\046\021" +
    "\034\023\032\027\037\030\052\031\045\033\026\035\051" +
    "\047\033\050\043\001\002\000\036\011\042\012\035\015" +
    "\047\016\044\017\046\021\034\023\032\027\037\030\052" +
    "\031\045\033\026\035\051\047\033\050\043\001\002\000" +
    "\042\003\uffe1\006\uffe1\007\uffe1\013\uffe1\020\uffe1\025\064" +
    "\034\uffe1\036\uffe1\040\uffe1\041\uffe1\042\uffe1\046\065\050" +
    "\056\051\063\052\061\053\066\001\002\000\050\003\uffde" +
    "\006\uffde\007\uffde\013\uffde\020\uffde\025\064\034\uffde\036" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\046\uffde\050\uffde\051\uffde\052\061\053\uffde\001\002\000" +
    "\050\003\uffdc\006\uffdc\007\uffdc\013\uffdc\020\uffdc\025\064" +
    "\034\uffdc\036\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\050\uffdc\051\uffdc\052\061\053\uffdc" +
    "\001\002\000\004\035\074\001\002\000\040\011\uffbd\012" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\021\uffbd\023\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\033\uffbd\035\uffbd\036\uffbf\047\uffbd\050" +
    "\uffbd\001\002\000\004\036\101\001\002\000\036\011\042" +
    "\012\035\015\047\016\044\017\046\021\034\023\032\027" +
    "\037\030\052\031\045\033\026\035\051\047\033\050\043" +
    "\001\002\000\032\025\064\036\uffc0\041\100\042\057\043" +
    "\062\044\060\045\067\046\065\050\056\051\063\052\061" +
    "\053\066\001\002\000\036\011\uffbe\012\uffbe\015\uffbe\016" +
    "\uffbe\017\uffbe\021\uffbe\023\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\033\uffbe\035\uffbe\047\uffbe\050\uffbe\001\002\000\050\003" +
    "\uffd9\006\uffd9\007\uffd9\013\uffd9\020\uffd9\025\uffd9\034\uffd9" +
    "\036\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\046\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\001\002" +
    "\000\050\003\uffe0\006\uffe0\007\uffe0\013\uffe0\020\uffe0\025" +
    "\064\034\uffe0\036\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\046\065\050\uffe0\051\uffe0\052\061\053" +
    "\066\001\002\000\042\003\uffe3\006\uffe3\007\uffe3\013\uffe3" +
    "\020\uffe3\025\064\034\uffe3\036\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\046\065\050\056\051\063\052\061\053\066\001\002" +
    "\000\050\003\uffdd\006\uffdd\007\uffdd\013\uffdd\020\uffdd\025" +
    "\064\034\uffdd\036\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\001\002\000\042\003\uffe2\006\uffe2\007\uffe2\013\uffe2" +
    "\020\uffe2\025\064\034\uffe2\036\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\046\065\050\056\051\063\052\061\053\066\001\002" +
    "\000\050\003\uffdb\006\uffdb\007\uffdb\013\uffdb\020\uffdb\025" +
    "\064\034\uffdb\036\uffdb\040\uffdb\041\uffdb\042\uffdb\043\062" +
    "\044\060\045\067\046\065\050\056\051\063\052\061\053" +
    "\066\001\002\000\050\003\uffdf\006\uffdf\007\uffdf\013\uffdf" +
    "\020\uffdf\025\064\034\uffdf\036\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\046\065\050\uffdf\051\uffdf" +
    "\052\061\053\066\001\002\000\004\036\111\001\002\000" +
    "\050\003\uffda\006\uffda\007\uffda\013\uffda\020\uffda\025\uffda" +
    "\034\uffda\036\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044" +
    "\uffda\045\uffda\046\uffda\050\uffda\051\uffda\052\uffda\053\uffda" +
    "\001\002\000\030\025\064\036\113\042\057\043\062\044" +
    "\060\045\067\046\065\050\056\051\063\052\061\053\066" +
    "\001\002\000\050\003\uffed\006\uffed\007\uffed\013\uffed\020" +
    "\uffed\025\uffed\034\uffed\036\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\044\uffed\045\uffed\046\uffed\050\uffed\051\uffed\052" +
    "\uffed\053\uffed\001\002\000\050\003\uffe4\006\uffe4\007\uffe4" +
    "\013\uffe4\020\uffe4\025\064\034\uffe4\036\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\050\uffe4" +
    "\051\uffe4\052\061\053\uffe4\001\002\000\054\003\uffc5\006" +
    "\uffc5\007\uffc5\013\uffc5\020\uffc5\024\uffc5\025\uffc5\033\uffc5" +
    "\034\uffc5\036\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\001\002\000\054\003\uffc6\006\uffc6\007\uffc6\013\uffc6\020" +
    "\uffc6\024\uffc6\025\uffc6\033\uffc6\034\uffc6\036\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\001\002\000\050\003\uffd7" +
    "\006\uffd7\007\uffd7\013\uffd7\020\uffd7\025\uffd7\034\uffd7\036" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\001\002\000" +
    "\050\003\uffd8\006\uffd8\007\uffd8\013\uffd8\020\uffd8\025\uffd8" +
    "\034\uffd8\036\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\001\002\000\054\003\uffc7\006\uffc7\007\uffc7\013\uffc7\020" +
    "\uffc7\024\uffc7\025\uffc7\033\uffc7\034\uffc7\036\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\001\002\000\054\003\uffc8" +
    "\006\uffc8\007\uffc8\013\uffc8\020\uffc8\024\uffc8\025\uffc8\033" +
    "\uffc8\034\uffc8\036\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\050\uffc8\051\uffc8\052\uffc8\053" +
    "\uffc8\001\002\000\054\003\uffc9\006\uffc9\007\uffc9\013\uffc9" +
    "\020\uffc9\024\uffc9\025\uffc9\033\uffc9\034\uffc9\036\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\001\002\000\004\037" +
    "\126\001\002\000\050\003\uffe8\006\uffe8\007\uffe8\013\uffe8" +
    "\020\uffe8\025\uffe8\034\uffe8\036\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\050\uffe8\051\uffe8" +
    "\052\uffe8\053\uffe8\001\002\000\014\004\121\014\122\022" +
    "\115\026\116\032\123\001\002\000\006\013\130\024\131" +
    "\001\002\000\036\011\042\012\035\015\047\016\044\017" +
    "\046\021\034\023\032\027\037\030\052\031\045\033\026" +
    "\035\051\047\033\050\043\001\002\000\036\011\042\012" +
    "\035\015\047\016\044\017\046\021\034\023\032\027\037" +
    "\030\052\031\045\033\026\035\051\047\033\050\043\001" +
    "\002\000\030\013\133\025\064\042\057\043\062\044\060" +
    "\045\067\046\065\050\056\051\063\052\061\053\066\001" +
    "\002\000\036\011\042\012\035\015\047\016\044\017\046" +
    "\021\034\023\032\027\037\030\052\031\045\033\026\035" +
    "\051\047\033\050\043\001\002\000\050\003\uffea\006\uffea" +
    "\007\uffea\013\uffea\020\uffea\025\064\034\uffea\036\uffea\040" +
    "\uffea\041\uffea\042\057\043\062\044\060\045\067\046\065" +
    "\050\056\051\063\052\061\053\066\001\002\000\050\003" +
    "\uffe9\006\uffe9\007\uffe9\013\uffe9\020\uffe9\025\064\034\uffe9" +
    "\036\uffe9\040\uffe9\041\uffe9\042\057\043\062\044\060\045" +
    "\067\046\065\050\056\051\063\052\061\053\066\001\002" +
    "\000\050\003\uffe5\006\uffe5\007\uffe5\013\uffe5\020\uffe5\025" +
    "\064\034\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\046\065\050\uffe5\051\uffe5\052\061\053" +
    "\066\001\002\000\036\011\ufffc\012\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\021\ufffc\023\ufffc\027\ufffc\030\ufffc\031\ufffc\033" +
    "\ufffc\035\ufffc\047\ufffc\050\ufffc\001\002\000\052\003\uffc1" +
    "\006\uffc1\007\uffc1\013\uffc1\020\uffc1\025\uffc1\030\uffc1\034" +
    "\uffc1\036\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\001" +
    "\002\000\030\020\143\025\064\042\057\043\062\044\060" +
    "\045\067\046\065\050\056\051\063\052\061\053\066\001" +
    "\002\000\050\003\uffee\006\uffee\007\uffee\013\uffee\020\uffee" +
    "\025\uffee\034\uffee\036\uffee\040\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\045\uffee\046\uffee\050\uffee\051\uffee\052\uffee" +
    "\053\uffee\001\002\000\036\011\042\012\035\015\047\016" +
    "\044\017\046\021\034\023\032\027\037\030\052\031\045" +
    "\033\026\035\145\047\033\050\043\001\002\000\050\003" +
    "\ufff0\006\ufff0\007\147\013\ufff0\020\ufff0\025\064\034\ufff0" +
    "\036\ufff0\040\ufff0\041\ufff0\042\057\043\062\044\060\045" +
    "\067\046\065\050\056\051\063\052\061\053\066\001\002" +
    "\000\040\011\042\012\035\015\047\016\044\017\046\021" +
    "\034\023\032\027\037\030\052\031\045\033\026\035\051" +
    "\036\146\047\033\050\043\001\002\000\050\003\uffef\006" +
    "\uffef\007\uffef\013\uffef\020\uffef\025\uffef\034\uffef\036\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\050\uffef\051\uffef\052\uffef\053\uffef\001\002\000\036" +
    "\011\042\012\035\015\047\016\044\017\046\021\034\023" +
    "\032\027\037\030\052\031\045\033\026\035\051\047\033" +
    "\050\043\001\002\000\050\003\ufff1\006\ufff1\007\ufff1\013" +
    "\ufff1\020\ufff1\025\064\034\ufff1\036\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\065\050\056\051" +
    "\063\052\061\053\066\001\002\000\050\003\uffe6\006\uffe6" +
    "\007\uffe6\013\uffe6\020\uffe6\025\064\034\uffe6\036\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\062\044\060\045\067\046\065" +
    "\050\056\051\063\052\061\053\066\001\002\000\032\003" +
    "\153\006\154\025\064\042\057\043\062\044\060\045\067" +
    "\046\065\050\056\051\063\052\061\053\066\001\002\000" +
    "\050\003\uffeb\006\uffeb\007\uffeb\013\uffeb\020\uffeb\025\uffeb" +
    "\034\uffeb\036\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044" +
    "\uffeb\045\uffeb\046\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb" +
    "\001\002\000\036\011\042\012\035\015\047\016\044\017" +
    "\046\021\034\023\032\027\037\030\052\031\045\033\026" +
    "\035\051\047\033\050\043\001\002\000\050\003\uffec\006" +
    "\uffec\007\uffec\013\uffec\020\uffec\025\064\034\uffec\036\uffec" +
    "\040\uffec\041\uffec\042\057\043\062\044\060\045\067\046" +
    "\065\050\056\051\063\052\061\053\066\001\002\000\006" +
    "\030\ufff2\036\167\001\002\000\014\004\121\014\122\022" +
    "\115\026\116\032\123\001\002\000\010\003\162\024\163" +
    "\040\161\001\002\000\010\003\uffce\030\uffce\034\uffce\001" +
    "\002\000\010\003\uffcb\030\uffcb\034\uffcb\001\002\000\036" +
    "\011\042\012\035\015\047\016\044\017\046\021\034\023" +
    "\032\027\037\030\052\031\045\033\026\035\051\047\033" +
    "\050\043\001\002\000\030\025\064\040\165\042\057\043" +
    "\062\044\060\045\067\046\065\050\056\051\063\052\061" +
    "\053\066\001\002\000\010\003\uffcd\030\uffcd\034\uffcd\001" +
    "\002\000\004\030\173\001\002\000\004\037\170\001\002" +
    "\000\014\004\121\014\122\022\115\026\116\032\123\001" +
    "\002\000\004\033\026\001\002\000\010\003\uffc3\030\uffc3" +
    "\034\uffc3\001\002\000\004\037\202\001\002\000\006\036" +
    "\176\041\175\001\002\000\004\030\ufff3\001\002\000\004" +
    "\037\177\001\002\000\014\004\121\014\122\022\115\026" +
    "\116\032\123\001\002\000\004\033\026\001\002\000\010" +
    "\003\uffc4\030\uffc4\034\uffc4\001\002\000\014\004\121\014" +
    "\122\022\115\026\116\032\123\001\002\000\006\036\uffca" +
    "\041\uffca\001\002\000\010\003\022\030\021\034\205\001" +
    "\002\000\006\002\ufffa\005\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\006\010\004\015\003\001\001\000\004\003" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\017\001\001\000" +
    "\006\005\023\007\024\001\001\000\002\001\001\000\004" +
    "\002\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\035\004\040\013\037\014" +
    "\047\001\001\000\012\002\035\004\151\013\037\014\047" +
    "\001\001\000\012\002\035\004\150\013\037\014\047\001" +
    "\001\000\002\001\001\000\012\002\035\004\140\013\037" +
    "\014\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\035\004\135\013\037\014\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\117\001\001\000\012" +
    "\002\035\004\113\013\037\014\047\001\001\000\002\001" +
    "\001\000\012\002\035\004\111\013\037\014\047\001\001" +
    "\000\002\001\001\000\006\020\107\021\075\001\001\000" +
    "\012\002\035\004\054\013\037\014\047\001\001\000\002" +
    "\001\001\000\012\002\035\004\106\013\037\014\047\001" +
    "\001\000\012\002\035\004\105\013\037\014\047\001\001" +
    "\000\012\002\035\004\104\013\037\014\047\001\001\000" +
    "\012\002\035\004\103\013\037\014\047\001\001\000\012" +
    "\002\035\004\102\013\037\014\047\001\001\000\012\002" +
    "\035\004\101\013\037\014\047\001\001\000\002\001\001" +
    "\000\012\002\035\004\071\013\037\014\047\001\001\000" +
    "\012\002\035\004\070\013\037\014\047\001\001\000\012" +
    "\002\035\004\067\013\037\014\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\074\021\075\001\001\000\002\001\001\000" +
    "\012\002\035\004\076\013\037\014\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\126\001\001\000\002\001\001\000\012\002\035" +
    "\004\134\013\037\014\047\001\001\000\012\002\035\004" +
    "\131\013\037\014\047\001\001\000\002\001\001\000\012" +
    "\002\035\004\133\013\037\014\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\035\004\143\013\037\014\047\001\001\000\002" +
    "\001\001\000\012\002\035\004\111\013\037\014\047\001" +
    "\001\000\002\001\001\000\012\002\035\004\147\013\037" +
    "\014\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\035\004\154" +
    "\013\037\014\047\001\001\000\002\001\001\000\004\016" +
    "\165\001\001\000\004\011\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\035\004" +
    "\163\013\037\014\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\173\001\001\000\002\001\001\000" +
    "\004\011\170\001\001\000\004\002\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\177\001\001\000\004" +
    "\002\200\001\001\000\002\001\001\000\004\011\202\001" +
    "\001\000\002\001\001\000\006\005\023\007\024\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public String filename;
  public int toReturn = 0;

  public parser(java_cup.runtime.Scanner s, String pFilename) {
      super(s);
      filename = pFilename;
  }


  public void errorMessage(int pLine, int pColumn, String pMessage)
  {
    String errorToDisp = this.filename + ":" + pLine + ":" + pColumn + ": syntax error: " + pMessage ;
     System.err.println(errorToDisp);
     this.toReturn = 1;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // argOthers ::= 
            {
              ParserArray<Expressions> RESULT =null;
		RESULT=new ParserArray<Expressions>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argOthers",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // argOthers ::= argOthers expression COMMA 
            {
              ParserArray<Expressions> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Expressions> args = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		args.add(exp1); RESULT=args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argOthers",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // argArray ::= 
            {
              ParserArray<Expressions> RESULT =null;
		RESULT=new ParserArray<Expressions>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argArray",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // argArray ::= argOthers expression 
            {
              ParserArray<Expressions> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Expressions> args = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		args.add(exp1); RESULT=args;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argArray",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // block ::= LBRACE expArray expression RBRACE 
            {
              Blocks RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Expressions> ea = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ea.add(exp1); RESULT = new Blocks(0,0,ea); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // method ::= error block 
            {
              Method RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for Method"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // method ::= OBJECT_IDENTIFIER LPAR RPAR COLON types block 
            {
              Method RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blocks b = (Blocks)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Method(0, 0, oi, new ParserArray<Formals>(), t, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // method ::= OBJECT_IDENTIFIER LPAR formalArray formals RPAR COLON types block 
            {
              Method RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParserArray<Formals> fa = (ParserArray<Formals>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Formals f = (Formals)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blocks b = (Blocks)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		fa.add(f); RESULT = new Method(0, 0, oi, fa, t, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // types ::= UNIT 
            {
              Types RESULT =null;
		  RESULT = new Types(0,0,"unit"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // types ::= STRING 
            {
              Types RESULT =null;
		 RESULT = new Types(0,0,"string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // types ::= BOOL 
            {
              Types RESULT =null;
		  RESULT = new Types(0,0,"bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // types ::= INT32 
            {
              Types RESULT =null;
		  RESULT = new Types(0,0,"int32"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // types ::= TYPE_IDENTIFIER 
            {
              Types RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Types(0,0,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // formals ::= OBJECT_IDENTIFIER COLON types 
            {
              Formals RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Formals(0,0,oi,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // field ::= OBJECT_IDENTIFIER COLON types error 
            {
              Field RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for Field"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // field ::= error SEMICOLON 
            {
              Field RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for Field"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // field ::= OBJECT_IDENTIFIER COLON types ASSIGN expression SEMICOLON 
            {
              Field RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Field(0,0,oi,t,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // field ::= OBJECT_IDENTIFIER COLON types SEMICOLON 
            {
              Field RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Field(0,0,oi,t,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // boolean ::= FALSE 
            {
              Terminal RESULT =null;
		 RESULT = new Terminal(0, 0, "false","bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boolean ::= TRUE 
            {
              Terminal RESULT =null;
		 RESULT = new Terminal(0, 0, "true","bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // terminaison ::= boolean 
            {
              Terminal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Terminal b = (Terminal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminaison",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // terminaison ::= OBJECT_IDENTIFIER 
            {
              Terminal RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Terminal(0, 0, oi,"OI"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminaison",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // terminaison ::= STRING_LITERAL 
            {
              Terminal RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Terminal(0, 0, sl,"string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminaison",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // terminaison ::= INTEGER_LITERAL 
            {
              Terminal RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Terminal(0, 0, it,"int32"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminaison",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= terminaison 
            {
              Expressions RESULT =null;
		int terleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int terright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Terminal ter = (Terminal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ter; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= block 
            {
              Expressions RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Blocks b = (Blocks)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= NEW error 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for new expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= NEW types 
            {
              Expressions RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Types ti = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new New(0, 0, ti);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression DOT OBJECT_IDENTIFIER LPAR argArray RPAR 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Expressions> aa = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Call(0, 0, exp1, oi, aa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= OBJECT_IDENTIFIER LPAR argArray RPAR 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Expressions> aa = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Call(0, 0, new Terminal(0, 0, "self","SELF"), oi, aa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression AND expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "and", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression DIV expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "/", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression POW expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "^", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression TIMES expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "*", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression MINUS expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "-", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression PLUS expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "+", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression LOWER_EQUAL expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "<=", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression LOWER expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "<", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression EQUAL expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOp(0, 0, "=", exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= ISNULL expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnOp(0, 0, "isnull", exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= MINUS expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnOp(0, 0, "-", exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= NOT expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnOp(0, 0, "not", exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= OBJECT_IDENTIFIER ASSIGN expression 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Assign(0, 0, oi, exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= LET error 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for let expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= LET OBJECT_IDENTIFIER COLON types IN expression 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Types ti = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Let(0, 0, oi, ti, exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= LET OBJECT_IDENTIFIER COLON types ASSIGN expression IN expression 
            {
              Expressions RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String oi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Types ti = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Let(0, 0, oi, ti, exp2, exp1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= WHILE expression error 
            {
              Expressions RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions exp = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for while expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= WHILE expression DO expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new While(0, 0, exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= LPAR expression RPAR 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = exp1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= IF error 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for if expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= IF expression THEN LPAR RPAR 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new If(0, 0, exp1,new Terminal(0, 0, "()","unit") ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= IF expression THEN expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(0, 0, exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= IF expression THEN expression ELSE expression 
            {
              Expressions RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expressions exp2 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions exp3 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(0, 0, exp1, exp2, exp3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formalArray ::= 
            {
              ParserArray<Formals> RESULT =null;
		 RESULT=new ParserArray<Formals>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalArray",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formalArray ::= formalArray formals COMMA 
            {
              ParserArray<Formals> RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Formals> fa = (ParserArray<Formals>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formals f = (Formals)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  fa.add(f); RESULT =fa; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalArray",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // classBody ::= classBody error 
            {
              ClassBody RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassBody cb = (ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for bodyClass"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // classBody ::= 
            {
              ClassBody RESULT =null;
		RESULT = new ClassBody(0,0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // classBody ::= classBody method 
            {
              ClassBody RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassBody cb = (ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cb.addMethod(m); RESULT=cb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // classBody ::= classBody field 
            {
              ClassBody RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassBody cb = (ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cb.addField(f); RESULT=cb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classBody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // class_ ::= CLASS error 
            {
              Classe RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.errorMessage(eleft, eright, "Wrong syntax for class expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // class_ ::= CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER LBRACE classBody RBRACE 
            {
              Classe RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassBody bd = (ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Classe(0, 0, name, parent, bd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_ ::= CLASS TYPE_IDENTIFIER LBRACE classBody RBRACE 
            {
              Classe RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassBody bd = (ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Classe(0, 0, name, bd );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expArray ::= 
            {
              ParserArray<Expressions> RESULT =null;
		 RESULT = new ParserArray<Expressions>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArray",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expArray ::= expArray expression SEMICOLON 
            {
              ParserArray<Expressions> RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserArray<Expressions> ea = (ParserArray<Expressions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions exp1 = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ea.add(exp1); RESULT = ea; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArray",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classArray ::= 
            {
              ParserArray<Classe> RESULT =null;
		 RESULT = new ParserArray<Classe>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classArray",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classArray ::= classArray class_ 
            {
              ParserArray<Classe> RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserArray<Classe> ca = (ParserArray<Classe>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Classe c = (Classe)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ca.add(c); RESULT = ca; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classArray",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              Program RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.errorMessage(eleft, eright, "Error in program definition"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= classArray 
            {
              Program RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserArray<Classe> ca = (ParserArray<Classe>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(0,0, ca); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

